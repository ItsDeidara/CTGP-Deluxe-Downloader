/// <reference no-default-lib="true"/>
/// <reference lib="es2022" />

declare class AbortSignal extends EventTarget {
    readonly reason: any;
    readonly aborted: boolean;
    onabort: ((this: AbortSignal, ev: Event) => any) | null;
    constructor();
    throwIfAborted(): void;
    dispatchEvent(event: Event): boolean;
    any(signals: Iterable<AbortSignal>): AbortSignal;
}
declare class AbortController {
    signal: AbortSignal;
    constructor();
    abort(reason?: any): void;
}
interface EventListener<T extends Event> {
    (evt: T): void;
}
interface EventListenerObject<T extends Event> {
    handleEvent(evt: T): void;
}
type EventListenerOrEventListenerObject<T extends Event = any> = EventListener<T> | EventListenerObject<T>;
interface EventListenerOptions {
    capture?: boolean;
}
interface AddEventListenerOptions extends EventListenerOptions {
    once?: boolean;
    passive?: boolean;
    signal?: AbortSignal;
}
/**
 * EventTarget is a DOM interface implemented by objects that can receive events and may have listeners for them.
 *
 * @see https://developer.mozilla.org/docs/Web/API/EventTarget
 */
declare class EventTarget {
    /**
     * Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.
     *
     * The options argument sets listener-specific options. For compatibility this can be a boolean, in which case the method behaves exactly as if the value was specified as options's capture.
     *
     * When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.
     *
     * When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in § 2.8 Observing event listeners.
     *
     * When set to true, options's once indicates that the callback will only be invoked once after which the event listener will be removed.
     *
     * If an AbortSignal is passed for options's signal, then the event listener will be removed when signal is aborted.
     *
     * The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture.
     *
     * @see https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener
     */
    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;
    /**
     * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its `preventDefault()` method was not invoked, and false otherwise.
     *
     * @see https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent
     */
    dispatchEvent(event: Event): boolean;
    /**
     * Removes the event listener in target's event listener list with the same type, callback, and options.
     *
     * @see https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener
     */
    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
}
/**
 * Defines an individual gamepad or other controller, allowing access
 * to information such as button presses, axis positions, and id.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Gamepad
 */
declare class Gamepad {
    readonly axes: readonly number[];
    readonly buttons: readonly GamepadButton[];
    readonly connected: boolean;
    readonly id: string;
    readonly index: number;
    readonly mapping: GamepadMappingType;
    readonly timestamp: number;
    readonly vibrationActuator: GamepadHapticActuator;
    readonly deviceType: number;
    readonly rawButtons: bigint;
    readonly styleSet: number;
    /**
     * @ignore
     */
    constructor();
}
/**
 * Defines an individual button of a gamepad or other controller, allowing access
 * to the current state of different types of buttons available on the control device.
 *
 * @see https://developer.mozilla.org/docs/Web/API/GamepadButton
 */
declare class GamepadButton {
    pressed: boolean;
    touched: boolean;
    value: number;
    /**
     * @ignore
     */
    constructor();
}
/**
 * Represents hardware in the controller designed to provide haptic feedback
 * to the user (if available), most commonly vibration hardware.
 *
 * @see https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator
 */
declare class GamepadHapticActuator {
    readonly type: GamepadHapticActuatorType;
    playEffect(type: "dual-rumble", params?: GamepadEffectParameters): Promise<GamepadHapticsResult>;
    reset(): Promise<GamepadHapticsResult>;
    pulse(duration: number, delay?: number): void;
}
interface EventInit {
    bubbles?: boolean;
    cancelable?: boolean;
    composed?: boolean;
}
declare class Event {
    static readonly NONE: 0;
    static readonly CAPTURING_PHASE: 1;
    static readonly AT_TARGET: 2;
    static readonly BUBBLING_PHASE: 3;
    readonly NONE: 0;
    readonly CAPTURING_PHASE: 1;
    readonly AT_TARGET: 2;
    readonly BUBBLING_PHASE: 3;
    readonly bubbles: boolean;
    cancelBubble: boolean;
    readonly cancelable: boolean;
    readonly composed: boolean;
    readonly currentTarget: EventTarget | null;
    readonly defaultPrevented: boolean;
    readonly eventPhase: number;
    readonly isTrusted: boolean;
    returnValue: boolean;
    readonly srcElement: EventTarget | null;
    readonly target: EventTarget | null;
    readonly timeStamp: number;
    readonly type: string;
    constructor(type: string, options?: EventInit);
    composedPath(): EventTarget[];
    initEvent(type: string, bubbles?: boolean | undefined, cancelable?: boolean | undefined): void;
    preventDefault(): void;
    stopImmediatePropagation(): void;
    stopPropagation(): void;
}
interface CustomEventInit<T = any> extends EventInit {
    detail?: T;
}
declare class CustomEvent<T = any> extends Event {
    readonly detail: T | null;
    constructor(type: string, options?: CustomEventInit<T>);
    initCustomEvent(): void;
}
interface UIEventInit extends EventInit {
    detail?: number;
}
declare class UIEvent extends Event {
    readonly detail: number;
    readonly view: null;
    readonly which: number;
    constructor(type: string, options?: UIEventInit);
    initUIEvent(): void;
}
interface EventModifierInit extends UIEventInit {
    altKey?: boolean;
    ctrlKey?: boolean;
    metaKey?: boolean;
    modifierAltGraph?: boolean;
    modifierCapsLock?: boolean;
    modifierFn?: boolean;
    modifierFnLock?: boolean;
    modifierHyper?: boolean;
    modifierNumLock?: boolean;
    modifierScrollLock?: boolean;
    modifierSuper?: boolean;
    modifierSymbol?: boolean;
    modifierSymbolLock?: boolean;
    shiftKey?: boolean;
}
interface KeyboardEventInit extends EventModifierInit {
    /** @deprecated */
    charCode?: number;
    code?: string;
    isComposing?: boolean;
    key?: string;
    /** @deprecated */
    keyCode?: number;
    location?: number;
    repeat?: boolean;
}
declare class KeyboardEvent extends UIEvent {
    readonly DOM_KEY_LOCATION_STANDARD: 0;
    readonly DOM_KEY_LOCATION_LEFT: 1;
    readonly DOM_KEY_LOCATION_RIGHT: 2;
    readonly DOM_KEY_LOCATION_NUMPAD: 3;
    readonly charCode: number;
    readonly isComposing: boolean;
    readonly keyCode: number;
    readonly location: number;
    readonly repeat: boolean;
    constructor(type: string, options?: KeyboardEventInit);
    getModifierState(): boolean;
    initKeyboardEvent(): void;
    get ctrlKey(): boolean;
    get shiftKey(): boolean;
    get altKey(): boolean;
    get metaKey(): boolean;
    get code(): string;
    get key(): string;
}
interface TouchInit {
    clientX?: number;
    clientY?: number;
    force?: number;
    identifier: number;
    pageX?: number;
    pageY?: number;
    radiusX?: number;
    radiusY?: number;
    rotationAngle?: number;
    screenX?: number;
    screenY?: number;
    target: EventTarget;
}
/**
 * A single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)
 */
declare class Touch {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX) */
    readonly clientX: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY) */
    readonly clientY: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force) */
    readonly force: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier) */
    readonly identifier: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX) */
    readonly pageX: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY) */
    readonly pageY: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX) */
    readonly radiusX: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY) */
    readonly radiusY: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle) */
    readonly rotationAngle: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX) */
    readonly screenX: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY) */
    readonly screenY: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target) */
    readonly target: EventTarget;
    constructor(init: TouchInit);
}
/**
 * A list of contact points on a touch surface. For example, if the user has three
 * fingers on the touch surface (such as a screen or trackpad), the corresponding
 * `TouchList` object would have one `Touch` object for each finger, for a total
 * of three entries.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)
 */
declare class TouchList {
    [index: number]: Touch;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length) */
    readonly length: number;
    constructor();
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/item) */
    item(index: number): Touch | null;
    [Symbol.iterator](): IterableIterator<Touch>;
}
interface TouchEventInit extends EventModifierInit {
    changedTouches?: Touch[];
    targetTouches?: Touch[];
    touches?: Touch[];
}
declare class TouchEvent extends UIEvent {
    readonly altKey: boolean;
    readonly changedTouches: TouchList;
    readonly ctrlKey: boolean;
    readonly metaKey: boolean;
    readonly shiftKey: boolean;
    readonly targetTouches: TouchList;
    readonly touches: TouchList;
    constructor(type: string, options: TouchEventInit);
}
interface ErrorEventInit extends EventInit {
    colno?: number;
    error?: any;
    filename?: string;
    lineno?: number;
    message?: string;
}
declare class ErrorEvent extends Event {
    readonly colno: number;
    readonly error: any;
    readonly filename: string;
    readonly lineno: number;
    readonly message: string;
    constructor(type: string, options: ErrorEventInit);
}
interface PromiseRejectionEventInit extends EventInit {
    promise: Promise<any>;
    reason?: any;
}
declare class PromiseRejectionEvent extends Event {
    readonly promise: Promise<any>;
    readonly reason: any;
    constructor(type: string, options: PromiseRejectionEventInit);
}
interface GamepadEventInit extends EventInit {
    gamepad: Gamepad;
}
declare class GamepadEvent extends Event {
    readonly gamepad: Gamepad;
    constructor(type: string, options: GamepadEventInit);
}
/**
 * The `Image` class is the spiritual equivalent of the [`HTMLImageElement`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
 * class in web browsers. You can use it to load image data from the filesytem
 * or remote source over the network. Once loaded, the image may be drawn onto the screen
 * context or an offscreen canvas context using {@link CanvasRenderingContext2D.drawImage | `ctx.drawImage()`}.
 *
 * ### Supported Image Formats
 *
 *  - `jpg` - JPEG image data using [libjpeg-turbo](https://github.com/libjpeg-turbo/libjpeg-turbo)
 *  - `png` - PNG image data using [libpng](http://www.libpng.org/pub/png/libpng.html)
 *  - `webp` - WebP image data using [libpng](https://github.com/webmproject/libwebp)
 *
 * @example
 *
 * ```typescript
 * const ctx = screen.getContext('2d');
 *
 * const img = new Image();
 * img.addEventListener('load', () => {
 *   ctx.drawImage(img);
 * });
 * img.src = 'romfs:/logo.png';
 * ```
 */
declare class Image extends EventTarget {
    onload: ((this: Image, ev: Event) => any) | null;
    onerror: ((this: Image, ev: ErrorEvent) => any) | null;
    decoding: "async" | "sync" | "auto";
    isMap: boolean;
    loading: "eager" | "lazy";
    readonly width: number;
    readonly height: number;
    constructor();
    dispatchEvent(event: Event): boolean;
    get complete(): boolean;
    get naturalWidth(): number;
    get naturalHeight(): number;
    get src(): string;
    set src(val: string);
    className: string;
    get nodeType(): number;
    get nodeName(): string;
    getAttribute(name: string): string | null;
    setAttribute(name: string, value: string | number): void;
}
type PredefinedColorSpace = "display-p3" | "srgb";
interface ImageDataSettings {
    colorSpace?: PredefinedColorSpace;
}
declare class ImageData {
    readonly colorSpace: PredefinedColorSpace;
    readonly data: Uint8ClampedArray;
    readonly height: number;
    readonly width: number;
    constructor(sw: number, sh: number, settings?: ImageDataSettings);
    constructor(data: Uint8ClampedArray, sw: number, sh?: number, settings?: ImageDataSettings);
}
interface DOMPointInit {
    w?: number;
    x?: number;
    y?: number;
    z?: number;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly) */
declare class DOMPointReadOnly {
    constructor(x?: number, y?: number, z?: number, w?: number);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint) */
    static fromPoint({ x, y, z, w }?: DOMPointInit): DOMPointReadOnly;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w) */
    readonly w: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x) */
    readonly x: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y) */
    readonly y: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z) */
    readonly z: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform) */
    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON) */
    toJSON(): {
        x: number;
        y: number;
        z: number;
        w: number;
    };
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint) */
declare class DOMPoint extends DOMPointReadOnly {
    constructor(x?: number, y?: number, z?: number, w?: number);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint) */
    static fromPoint({ x, y, z, w }?: DOMPointInit): DOMPoint;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w) */
    w: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x) */
    x: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y) */
    y: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z) */
    z: number;
}
interface DOMMatrix2DInit {
    a?: number;
    b?: number;
    c?: number;
    d?: number;
    e?: number;
    f?: number;
    m11?: number;
    m12?: number;
    m21?: number;
    m22?: number;
    m41?: number;
    m42?: number;
}
interface DOMMatrixInit extends DOMMatrix2DInit {
    is2D?: boolean;
    m13?: number;
    m14?: number;
    m23?: number;
    m24?: number;
    m31?: number;
    m32?: number;
    m33?: number;
    m34?: number;
    m43?: number;
    m44?: number;
}
declare class DOMMatrixReadOnly {
    readonly a: number;
    readonly b: number;
    readonly c: number;
    readonly d: number;
    readonly e: number;
    readonly f: number;
    readonly m11: number;
    readonly m12: number;
    readonly m13: number;
    readonly m14: number;
    readonly m21: number;
    readonly m22: number;
    readonly m23: number;
    readonly m24: number;
    readonly m31: number;
    readonly m32: number;
    readonly m33: number;
    readonly m34: number;
    readonly m41: number;
    readonly m42: number;
    readonly m43: number;
    readonly m44: number;
    readonly is2D: boolean;
    readonly isIdentity: boolean;
    constructor(init?: string | number[]);
    flipX(): DOMMatrix;
    flipY(): DOMMatrix;
    inverse(): DOMMatrix;
    multiply(other?: DOMMatrixInit): DOMMatrix;
    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
    rotateFromVector(x?: number, y?: number): DOMMatrix;
    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;
    skewX(sx?: number): DOMMatrix;
    skewY(sy?: number): DOMMatrix;
    toFloat32Array(): Float32Array;
    toFloat64Array(): Float64Array;
    transformPoint(point?: DOMPointInit): DOMPoint;
    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
    toJSON(): {
        a: number;
        b: number;
        c: number;
        d: number;
        e: number;
        f: number;
        is2D: boolean;
        isIdentity: boolean;
        m11: number;
        m12: number;
        m13: number;
        m14: number;
        m21: number;
        m22: number;
        m23: number;
        m24: number;
        m31: number;
        m32: number;
        m33: number;
        m34: number;
        m41: number;
        m42: number;
        m43: number;
        m44: number;
    };
    toString(): string;
    static fromFloat32Array(init: Float32Array): DOMMatrixReadOnly;
    static fromFloat64Array(init: Float64Array): DOMMatrixReadOnly;
    static fromMatrix(init?: DOMMatrixInit): DOMMatrixReadOnly;
}
declare class DOMMatrix extends DOMMatrixReadOnly {
    a: number;
    b: number;
    c: number;
    d: number;
    e: number;
    f: number;
    m11: number;
    m12: number;
    m13: number;
    m14: number;
    m21: number;
    m22: number;
    m23: number;
    m24: number;
    m31: number;
    m32: number;
    m33: number;
    m34: number;
    m41: number;
    m42: number;
    m43: number;
    m44: number;
    invertSelf(): DOMMatrix;
    multiplySelf(other?: DOMMatrixInit): DOMMatrix;
    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;
    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;
    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    setMatrixValue(transformList: string): DOMMatrix;
    skewXSelf(sx?: number): DOMMatrix;
    skewYSelf(sy?: number): DOMMatrix;
    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;
    static fromFloat32Array(init: Float32Array): DOMMatrix;
    static fromFloat64Array(init: Float64Array): DOMMatrix;
    static fromMatrix(init?: DOMMatrixInit): DOMMatrix;
}
/**
 * Declares a path that can then be used on a {@link CanvasRenderingContext2D | `CanvasRenderingContext2D`} object.
 * The path methods of the `CanvasRenderingContext2D` interface are also present on this interface, which gives you
 * the convenience of being able to retain and replay your path whenever desired.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Path2D
 */
declare class Path2D {
    constructor(path?: Path2D | string);
    addPath(path: Path2D): void;
    moveTo(x: number, y: number): void;
    lineTo(x: number, y: number): void;
    arc(x: number, y: number, r: number, start: number, end: number, ccw: boolean): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, r: number): void;
    ellipse(x: number, y: number, rx: number, ry: number, angle: number, start: number, end: number, ccw: boolean): void;
    closePath(): void;
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    rect(x: number, y: number, width: number, height: number): void;
    roundRect(x: number, y: number, width: number, height: number, radii?: number | number[]): void;
}
declare class CanvasRenderingContext2D {
    /**
     * @ignore
     */
    constructor();
    direction: string;
    fontKerning: string;
    /**
     * A read-only reference to the {@link Screen | `Canvas`} object
     * that is associated with the context.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas
     */
    get canvas(): Screen;
    /**
     * Specifies the current text style to use when drawing text.
     * This string uses the same syntax as the
     * [CSS font](https://developer.mozilla.org/docs/Web/CSS/font) specifier.
     *
     * @default "10px sans-serif"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font
     */
    get font(): string;
    set font(v: string);
    /**
     * Strokes (outlines) the current or given path with the current stroke style.
     *
     * @param path A {@link Path2D | `Path2D`} path to stroke.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke
     */
    stroke(path?: Path2D): void;
    /**
     * Fills the current or given path with the current {@link CanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * @param fillRule
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill
     */
    fill(fillRule?: CanvasFillRule): void;
    fill(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Specifies the color, gradient, or pattern to use inside shapes.
     *
     * @default "#000" (black)
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle
     */
    get fillStyle(): string;
    set fillStyle(v: string);
    /**
     * Specifies the color, gradient, or pattern to use for the strokes (outlines) around shapes.
     *
     * @default "#000" (black)
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle
     */
    get strokeStyle(): string;
    set strokeStyle(v: string);
    /**
     * Specifies the alpha (transparency) value that is applied to shapes and images
     * before they are drawn onto the canvas.
     *
     * Value is between `0.0` (fully transparent) and `1.0` (fully opaque), inclusive.
     * Values outside that range, including `Infinity` and `NaN`, will not be set, and
     * `globalAlpha` will retain its previous value.
     *
     * @default 1.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha
     */
    globalAlpha: number;
    /**
     * Specifies the type of compositing operation to apply when drawing new shapes.
     *
     * @default "source-over"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
     */
    globalCompositeOperation: GlobalCompositeOperation;
    /**
     * Determines whether scaled images are smoothed (`true`) or not (`false`).
     *
     * @default true
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
     */
    imageSmoothingEnabled: boolean;
    /**
     * Determines the quality of image smoothing.
     *
     * @default "low"
     * @note For this property to have an effect, {@link CanvasRenderingContext2D.imageSmoothingEnabled | `imageSmoothingEnabled`} must be true.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality
     */
    imageSmoothingQuality: ImageSmoothingQuality;
    /**
     * Determines the shape used to draw the end points of lines.
     *
     * @default "butt"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap
     */
    lineCap: CanvasLineCap;
    /**
     * Determines the line dash offset (or "phase").
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
     */
    lineDashOffset: number;
    /**
     * Determines the shape used to join two line segments where they meet.
     *
     * This property has no effect wherever two connected segments have the same
     * direction, because no joining area will be added in this case. Degenerate
     * segments with a length of zero (i.e. with all endpoints and control points
     * at the exact same position) are also ignored.
     *
     * @default "miter"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin
     */
    lineJoin: CanvasLineJoin;
    /**
     * Determines the thickness of lines.
     *
     * @default 1.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth
     */
    lineWidth: number;
    /**
     * Specifies the miter limit ratio, in coordinate space units. Zero, negative,
     * `Infinity`, and `NaN` values are ignored.
     *
     * @default 10.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit
     */
    miterLimit: number;
    /**
     * Specifies the current text alignment used when drawing text.
     *
     * The alignment is relative to the `x` value of the {@link CanvasRenderingContext2D.fillText | `fillText()`} /
     * {@link CanvasRenderingContext2D.strokeText | `strokeText()`} methods.
     * For example, if `textAlign` is `"center"`, then the text's left
     * edge will be at `x - (textWidth / 2)`.
     *
     * @default "start"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign
     */
    textAlign: CanvasTextAlign;
    /**
     * Specifies the current text baseline used when drawing text.
     *
     * @default "alphabetic"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline
     */
    textBaseline: CanvasTextBaseline;
    /**
     * Starts a new path by emptying the list of sub-paths.
     * Call this method when you want to create a new path.
     *
     * @note To create a new sub-path (i.e. one matching the current canvas state),
     * you can use `CanvasRenderingContext2D.moveTo()`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath
     */
    beginPath(): void;
    /**
     * Turns the current or given path into the current clipping region. The
     * previous clipping region, if any, is intersected with the current or
     * given path to create the new clipping region.
     *
     * @example
     *
     * ```typescript
     * // Create circular clipping region
     * ctx.beginPath();
     * ctx.arc(100, 75, 50, 0, Math.PI * 2);
     * ctx.clip();
     *
     * // Draw stuff that gets clipped
     * ctx.fillStyle = "blue";
     * ctx.fillRect(0, 0, canvas.width, canvas.height);
     * ctx.fillStyle = "orange";
     * ctx.fillRect(0, 0, 100, 100);
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip
     */
    clip(fillRule?: CanvasFillRule): void;
    clip(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Reports whether or not the specified point is contained in the current path.
     *
     * @example
     *
     * ```typescript
     * ctx.beginPath();
     * ctx.rect(10, 10, 100, 100);
     * console.log(ctx.isPointInPath(30, 70));
     * // true
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath
     */
    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;
    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;
    /**
     * Reports whether or not the specified point is inside the area contained by the stroking of a path.
     *
     * @example
     *
     * ```typescript
     * ctx.beginPath();
     * ctx.rect(10, 10, 100, 100);
     * console.log(ctx.isPointInStroke(50, 10));
     * // true
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke
     */
    isPointInStroke(x: number, y: number): boolean;
    isPointInStroke(path: Path2D, x: number, y: number): boolean;
    /**
     * Attempts to add a straight line from the current point to the start of
     * the current sub-path. If the shape has already been closed or has only
     * one point, this function does nothing.
     *
     * This method doesn't draw anything to the canvas directly. You can render
     * the path using the stroke() or fill() methods.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath
     */
    closePath(): void;
    /**
     * Saves the entire state of the canvas by pushing the current state onto a stack.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save
     */
    restore(): void;
    /**
     * Restores the most recently saved canvas state by popping the top entry in the
     * drawing state stack. If there is no saved state, this method does nothing.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore
     */
    save(): void;
    /**
     * Adds the specified angle of rotation to the transformation matrix.
     *
     * @param angle The rotation angle, clockwise in radians. You can use `degree * Math.PI / 180` to calculate a radian from a degree.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate
     */
    rotate(angle: number): void;
    /**
     * Adds a scaling transformation to the canvas units horizontally and/or vertically.
     *
     * By default, one unit on the canvas is exactly one pixel. A scaling transformation
     * modifies this behavior. For instance, a scaling factor of 0.5 results in a unit
     * size of 0.5 pixels; shapes are thus drawn at half the normal size. Similarly, a
     * scaling factor of 2.0 increases the unit size so that one unit becomes two pixels;
     * shapes are thus drawn at twice the normal size.
     *
     * @param x Scaling factor in the horizontal direction. A negative value flips pixels across the vertical axis. A value of `1` results in no horizontal scaling.
     * @param y Scaling factor in the vertical direction. A negative value flips pixels across the horizontal axis. A value of `1` results in no vertical scaling.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale
     */
    scale(x: number, y: number): void;
    /**
     * Retrieves the current transformation matrix being applied to the context.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform
     */
    getTransform(): DOMMatrix;
    /**
     * Multiplies the current transformation with the matrix described by the arguments
     * of this method. This lets you scale, rotate, translate (move), and skew the context.
     *
     * @param a (`m11`) The cell in the first row and first column of the matrix.
     * @param b (`m12`) The cell in the second row and first column of the matrix.
     * @param c (`m21`) The cell in the first row and second column of the matrix.
     * @param d (`m22`) The cell in the second row and second column of the matrix.
     * @param e (`m41`) The cell in the first row and third column of the matrix.
     * @param f (`m42`) The cell in the second row and third column of the matrix.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform
     */
    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    /**
     * Adds a translation transformation to the current matrix by moving the canvas
     * and its origin `x` units horizontally and `y` units vertically on the grid.
     *
     * @param x Distance to move in the horizontal direction. Positive values are to the right, and negative to the left.
     * @param y Distance to move in the vertical direction. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate
     */
    translate(x: number, y: number): void;
    /**
     * Resets (overrides) the current transformation to the identity matrix, and then
     * invokes a transformation described by the arguments of this method. This lets
     * you scale, rotate, translate (move), and skew the context.
     *
     * @param a (`m11`) The cell in the first row and first column of the matrix.
     * @param b (`m12`) The cell in the second row and first column of the matrix.
     * @param c (`m21`) The cell in the first row and second column of the matrix.
     * @param d (`m22`) The cell in the second row and second column of the matrix.
     * @param e (`m41`) The cell in the first row and third column of the matrix.
     * @param f (`m42`) The cell in the second row and third column of the matrix.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform
     */
    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    /**
     * Resets (overrides) the current transformation to the identity matrix, and then
     * invokes a transformation described by the arguments of this method. This lets
     * you scale, rotate, translate (move), and skew the context.
     *
     * @param transform An object containing the `DOMMatrix` 2D transformation values.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform
     */
    setTransform(transform?: DOMMatrix2DInit): void;
    /**
     * Resets the current transform to the identity matrix.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform
     */
    resetTransform(): void;
    /**
     * Gets the current line dash pattern.
     *
     * @returns An `Array` of numbers that specify distances to alternately draw a line and a gap (in coordinate space units). If the number, when setting the elements, is odd, the elements of the array get copied and concatenated. For example, setting the line dash to `[5, 15, 25]` will result in getting back `[5, 15, 25, 5, 15, 25]`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash
     */
    getLineDash(): number[];
    /**
     * Sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.
     *
     * @note To return to using solid lines, set the line dash list to an empty array.
     * @param segments An `Array` of numbers that specify distances to alternately draw a line and a gap (in coordinate space units). If the number of elements in the array is odd, the elements of the array get copied and concatenated. For example, `[5, 15, 25]` will become `[5, 15, 25, 5, 15, 25]`. If the array is empty, the line dash list is cleared and line strokes return to being solid.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash
     */
    setLineDash(segments: number[]): void;
    /**
     * Erases the pixels in a rectangular area by setting them to transparent black.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect
     */
    clearRect(x: number, y: number, width: number, height: number): void;
    /**
     * Draws a rectangle that is filled according to the current
     * {@link CanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * This method draws directly to the canvas without modifying the current path,
     * so any subsequent {@link CanvasRenderingContext2D.fill | `fill()`} or
     * {@link CanvasRenderingContext2D.stroke | `stroke()`} calls will have no effect on it.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect
     */
    fillRect(x: number, y: number, width: number, height: number): void;
    /**
     * Draws a rectangle that is stroked (outlined) according to the current
     * {@link CanvasRenderingContext2D.strokeStyle | `strokeStyle`} and other context settings.
     *
     * This method draws directly to the canvas without modifying the current path,
     * so any subsequent {@link CanvasRenderingContext2D.fill | `fill()`} or
     * {@link CanvasRenderingContext2D.stroke | `stroke()`} calls will have no effect on it.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect
     */
    strokeRect(x: number, y: number, width: number, height: number): void;
    createImageData(sw: number, sh: number, settings?: ImageDataSettings): ImageData;
    createImageData(imagedata: ImageData): ImageData;
    /**
     * Returns an {@link ImageData | `ImageData`} object representing the underlying pixel
     * data for a specified portion of the canvas.
     *
     * This method is not affected by the canvas's transformation matrix. If the specified
     * rectangle extends outside the bounds of the canvas, the pixels outside the canvas
     * are transparent black in the returned `ImageData` object.
     *
     * @param sx The x-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.
     * @param sy The y-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.
     * @param sw The width of the rectangle from which the ImageData will be extracted. Positive values are to the right, and negative to the left.
     * @param sh The height of the rectangle from which the ImageData will be extracted. Positive values are down, and negative are up.
     * @returns An `ImageData` object containing the image data for the rectangle of the canvas specified.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData
     */
    getImageData(sx: number, sy: number, sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData;
    putImageData(imageData: ImageData, dx: number, dy: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, dx: number, dy: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dWidth The width to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @param dHeight The height to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, dx: number, dy: number, dWidth: number, dHeight: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param sx The x-axis coordinate of the top left corner of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sy The y-axis coordinate of the top left corner of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sWidth The width of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sHeight The height of the sub-rectangle of the source `image` to draw into the destination context.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dWidth The width to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @param dHeight The height to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, sx: number, sy: number, sWidth: number, sHeight: number, dx: number, dy: number, dWidth: number, dHeight: number): void;
    lineTo(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    /**
     * Adds a rounded rectangle to the current path.
     *
     * @param x The x-axis coordinate of the rectangle's starting point, in pixels.
     * @param y The y-axis coordinate of the rectangle's starting point, in pixels.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @param radii A number or list specifying the radii of the circular arc to be used for the corners of the rectangle.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect
     */
    roundRect(x: number, y: number, width: number, height: number, radii?: number | DOMPointInit | Iterable<number | DOMPointInit>): void;
    /**
     * Draws the outlines of the characters of the text string at the specified coordinates,
     * stroking the string's characters with the current {@link CanvasRenderingContext2D.strokeStyle | `strokeStyle`}.
     *
     * @param text A string specifying the text string to render into the context.
     * @param x The x-axis coordinate of the point at which to begin drawing the text, in pixels.
     * @param y The y-axis coordinate of the baseline on which to begin drawing the text, in pixels.
     * @param maxWidth The maximum number of pixels wide the text may be once rendered. If not specified, there is no limit to the width of the text.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText
     */
    strokeText(text: string, x: number, y: number, maxWidth?: number): void;
    createConicGradient(startAngle: number, x: number, y: number): CanvasGradient;
    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;
    createPattern(image: CanvasImageSource, repetition: string | null): CanvasPattern | null;
    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;
    /**
     * Draws a text string at the specified coordinates, filling the string's
     * characters with the current {@link CanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * @param text A string specifying the text string to render into the context.
     * @param x The x-axis coordinate of the point at which to begin drawing the text, in pixels.
     * @param y The y-axis coordinate of the baseline on which to begin drawing the text, in pixels.
     * @param maxWidth The maximum number of pixels wide the text may be once rendered. If not specified, there is no limit to the width of the text.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText
     */
    fillText(text: string, x: number, y: number, maxWidth?: number): void;
    /**
     * Returns a `TextMetrics` object that contains information about
     * the measured text (such as its width, for example).
     *
     * @param text The text string to measure.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText
     */
    measureText(text: string): TextMetrics;
}
declare class Screen extends EventTarget {
    /**
     * @ignore
     */
    constructor();
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth) */
    get availWidth(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight) */
    get availHeight(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth) */
    get colorDepth(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation) */
    get orientation(): ScreenOrientation;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth) */
    get pixelDepth(): number;
    /**
     * The width of the screen in CSS pixels.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Screen/width
     */
    readonly width: number;
    /**
     * The height of the screen in CSS pixels.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Screen/height
     */
    readonly height: number;
    getContext(contextId: "2d"): CanvasRenderingContext2D;
    getContext(contextId: string): null;
    addEventListener(type: "touchstart" | "touchmove" | "touchend", listener: (ev: TouchEvent) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    /**
     * Creates a {@link Blob} object representing the image contained on the screen.
     *
     * @example
     *
     * ```typescript
     * screen.toBlob(blob => {
     *   blob.arrayBuffer().then(buffer => {
     *     Switch.writeFileSync('out.png', buffer);
     *   });
     * });
     * ```
     *
     * @param callback A callback function with the resulting {@link Blob} object as a single argument. `null` may be passed if the image cannot be created for any reason.
     * @param type A string indicating the image format. The default type is `image/png`. This image format will be also used if the specified type is not supported.
     * @param quality A number between `0` and `1` indicating the image quality to be used when creating images using file formats that support lossy compression (such as `image/jpeg`). A user agent will use its default quality value if this option is not specified, or if the number is outside the allowed range.
     */
    toBlob(callback: (blob: Blob | null) => void, type?: string, quality?: number): void;
    /**
     * Returns a `data:` URL containing a representation of the image in the format specified by the type parameter.
     *
     * @example
     *
     * ```typescript
     * const url = screen.toDataURL();
     * fetch(url)
     *   .then(res => res.arrayBuffer())
     *   .then(buffer => {
     *     Switch.writeFileSync('out.png', buffer);
     *   });
     * ```
     *
     * @param type A string indicating the image format. The default type is `image/png`. This image format will be also used if the specified type is not supported.
     * @param quality A number between `0` and `1` indicating the image quality to be used when creating images using file formats that support lossy compression (such as `image/jpeg`). The default quality value will be used if this option is not specified, or if the number is outside the allowed range.
     * @see https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toDataURL
     */
    toDataURL(type?: string, quality?: number): void;
    className: string;
    get nodeType(): number;
    get nodeName(): string;
    get offsetWidth(): number;
    get offsetHeight(): number;
    get offsetTop(): number;
    get offsetLeft(): number;
    getAttribute(name: string): string | null;
    setAttribute(name: string, value: string | number): void;
}
declare var screen: Screen;
/**
 * Represents a bitmap image which can be drawn to a `<canvas>` without undue latency.
 * It can be created from a variety of source objects using the
 * {@link createImageBitmap | `createImageBitmap()`} function.
 *
 * @see https://developer.mozilla.org/docs/Web/API/ImageBitmap
 */
declare class ImageBitmap {
    /**
     * @ignore
     */
    constructor();
    /**
     * Read-only property containing the height of the `ImageBitmap` in CSS pixels.
     *
     * @see https://developer.mozilla.org/docs/Web/API/ImageBitmap/height
     */
    height: number;
    /**
     * Read-only property containing the width of the `ImageBitmap` in CSS pixels.
     *
     * @see https://developer.mozilla.org/docs/Web/API/ImageBitmap/width
     */
    width: number;
    /**
     * Disposes of all graphical resources associated with the `ImageBitmap`.
     * @see https://developer.mozilla.org/docs/Web/API/ImageBitmap/close
     */
    close(): void;
}
interface ImageBitmapOptions {
    colorSpaceConversion?: ColorSpaceConversion;
    imageOrientation?: ImageOrientation;
    premultiplyAlpha?: PremultiplyAlpha;
    resizeHeight?: number;
    resizeQuality?: ResizeQuality;
    resizeWidth?: number;
}
/**
 * Creates a bitmap from a given source, optionally cropped to contain only
 * a portion of that source. This function accepts a variety of different
 * image sources, and returns a `Promise` which resolves to an {@link ImageBitmap}.
 *
 * @see https://developer.mozilla.org/docs/Web/API/createImageBitmap
 */
declare function createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;
declare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;
declare class OffscreenCanvasRenderingContext2D {
    /**
     * @ignore
     */
    constructor();
    direction: string;
    fontKerning: string;
    /**
     * A read-only reference to the {@link OffscreenCanvas | `OffscreenCanvas`} object
     * that is associated with the context.
     */
    get canvas(): OffscreenCanvas;
    /**
     * Specifies the current text style to use when drawing text.
     * This string uses the same syntax as the
     * [CSS font](https://developer.mozilla.org/docs/Web/CSS/font) specifier.
     *
     * @default "10px sans-serif"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font
     */
    get font(): string;
    set font(v: string);
    /**
     * Strokes (outlines) the current or given path with the current stroke style.
     *
     * @param path A {@link Path2D | `Path2D`} path to stroke.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke
     */
    stroke(path?: Path2D): void;
    /**
     * Fills the current or given path with the current {@link OffscreenCanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * @param fillRule
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill
     */
    fill(fillRule?: CanvasFillRule): void;
    fill(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Specifies the color, gradient, or pattern to use inside shapes.
     *
     * @default "#000" (black)
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle
     */
    get fillStyle(): string;
    set fillStyle(v: string);
    /**
     * Specifies the color, gradient, or pattern to use for the strokes (outlines) around shapes.
     *
     * @default "#000" (black)
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle
     */
    get strokeStyle(): string;
    set strokeStyle(v: string);
    /**
     * Specifies the alpha (transparency) value that is applied to shapes and images
     * before they are drawn onto the canvas.
     *
     * Value is between `0.0` (fully transparent) and `1.0` (fully opaque), inclusive.
     * Values outside that range, including `Infinity` and `NaN`, will not be set, and
     * `globalAlpha` will retain its previous value.
     *
     * @default 1.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha
     */
    globalAlpha: number;
    /**
     * Specifies the type of compositing operation to apply when drawing new shapes.
     *
     * @default "source-over"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
     */
    globalCompositeOperation: GlobalCompositeOperation;
    /**
     * Determines whether scaled images are smoothed (`true`) or not (`false`).
     *
     * @default true
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled
     */
    imageSmoothingEnabled: boolean;
    /**
     * Determines the quality of image smoothing.
     *
     * @default "low"
     * @note For this property to have an effect, {@link OffscreenCanvasRenderingContext2D.imageSmoothingEnabled | `imageSmoothingEnabled`} must be true.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality
     */
    imageSmoothingQuality: ImageSmoothingQuality;
    /**
     * Determines the shape used to draw the end points of lines.
     *
     * @default "butt"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap
     */
    lineCap: CanvasLineCap;
    /**
     * Determines the line dash offset (or "phase").
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset
     */
    lineDashOffset: number;
    /**
     * Determines the shape used to join two line segments where they meet.
     *
     * This property has no effect wherever two connected segments have the same
     * direction, because no joining area will be added in this case. Degenerate
     * segments with a length of zero (i.e. with all endpoints and control points
     * at the exact same position) are also ignored.
     *
     * @default "miter"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin
     */
    lineJoin: CanvasLineJoin;
    /**
     * Determines the thickness of lines.
     *
     * @default 1.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth
     */
    lineWidth: number;
    /**
     * Specifies the miter limit ratio, in coordinate space units. Zero, negative,
     * `Infinity`, and `NaN` values are ignored.
     *
     * @default 10.0
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit
     */
    miterLimit: number;
    /**
     * Specifies the current text alignment used when drawing text.
     *
     * The alignment is relative to the `x` value of the {@link CanvasRenderingContext2D.fillText | `fillText()`} /
     * {@link CanvasRenderingContext2D.strokeText | `strokeText()`} methods.
     * For example, if `textAlign` is `"center"`, then the text's left
     * edge will be at `x - (textWidth / 2)`.
     *
     * @default "start"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign
     */
    textAlign: CanvasTextAlign;
    /**
     * Specifies the current text baseline used when drawing text.
     *
     * @default "alphabetic"
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline
     */
    textBaseline: CanvasTextBaseline;
    /**
     * Starts a new path by emptying the list of sub-paths.
     * Call this method when you want to create a new path.
     *
     * @note To create a new sub-path (i.e. one matching the current canvas state),
     * you can use `CanvasRenderingContext2D.moveTo()`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath
     */
    beginPath(): void;
    /**
     * Turns the current or given path into the current clipping region. The
     * previous clipping region, if any, is intersected with the current or
     * given path to create the new clipping region.
     *
     * @example
     *
     * ```typescript
     * // Create circular clipping region
     * ctx.beginPath();
     * ctx.arc(100, 75, 50, 0, Math.PI * 2);
     * ctx.clip();
     *
     * // Draw stuff that gets clipped
     * ctx.fillStyle = "blue";
     * ctx.fillRect(0, 0, canvas.width, canvas.height);
     * ctx.fillStyle = "orange";
     * ctx.fillRect(0, 0, 100, 100);
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip
     */
    clip(fillRule?: CanvasFillRule): void;
    clip(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Reports whether or not the specified point is contained in the current path.
     *
     * @example
     *
     * ```typescript
     * ctx.beginPath();
     * ctx.rect(10, 10, 100, 100);
     * console.log(ctx.isPointInPath(30, 70));
     * // true
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath
     */
    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;
    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;
    /**
     * Reports whether or not the specified point is inside the area contained by the stroking of a path.
     *
     * @example
     *
     * ```typescript
     * ctx.beginPath();
     * ctx.rect(10, 10, 100, 100);
     * console.log(ctx.isPointInStroke(50, 10));
     * // true
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke
     */
    isPointInStroke(x: number, y: number): boolean;
    isPointInStroke(path: Path2D, x: number, y: number): boolean;
    /**
     * Attempts to add a straight line from the current point to the start of
     * the current sub-path. If the shape has already been closed or has only
     * one point, this function does nothing.
     *
     * This method doesn't draw anything to the canvas directly. You can render
     * the path using the stroke() or fill() methods.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath
     */
    closePath(): void;
    /**
     * Saves the entire state of the canvas by pushing the current state onto a stack.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save
     */
    restore(): void;
    /**
     * Restores the most recently saved canvas state by popping the top entry in the
     * drawing state stack. If there is no saved state, this method does nothing.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore
     */
    save(): void;
    /**
     * Adds the specified angle of rotation to the transformation matrix.
     *
     * @param angle The rotation angle, clockwise in radians. You can use `degree * Math.PI / 180` to calculate a radian from a degree.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate
     */
    rotate(angle: number): void;
    /**
     * Adds a scaling transformation to the canvas units horizontally and/or vertically.
     *
     * By default, one unit on the canvas is exactly one pixel. A scaling transformation
     * modifies this behavior. For instance, a scaling factor of 0.5 results in a unit
     * size of 0.5 pixels; shapes are thus drawn at half the normal size. Similarly, a
     * scaling factor of 2.0 increases the unit size so that one unit becomes two pixels;
     * shapes are thus drawn at twice the normal size.
     *
     * @param x Scaling factor in the horizontal direction. A negative value flips pixels across the vertical axis. A value of `1` results in no horizontal scaling.
     * @param y Scaling factor in the vertical direction. A negative value flips pixels across the horizontal axis. A value of `1` results in no vertical scaling.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale
     */
    scale(x: number, y: number): void;
    /**
     * Retrieves the current transformation matrix being applied to the context.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform
     */
    getTransform(): DOMMatrix;
    /**
     * Multiplies the current transformation with the matrix described by the arguments
     * of this method. This lets you scale, rotate, translate (move), and skew the context.
     *
     * @param a (`m11`) The cell in the first row and first column of the matrix.
     * @param b (`m12`) The cell in the second row and first column of the matrix.
     * @param c (`m21`) The cell in the first row and second column of the matrix.
     * @param d (`m22`) The cell in the second row and second column of the matrix.
     * @param e (`m41`) The cell in the first row and third column of the matrix.
     * @param f (`m42`) The cell in the second row and third column of the matrix.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform
     */
    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    /**
     * Adds a translation transformation to the current matrix by moving the canvas
     * and its origin `x` units horizontally and `y` units vertically on the grid.
     *
     * @param x Distance to move in the horizontal direction. Positive values are to the right, and negative to the left.
     * @param y Distance to move in the vertical direction. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate
     */
    translate(x: number, y: number): void;
    /**
     * Resets (overrides) the current transformation to the identity matrix, and then
     * invokes a transformation described by the arguments of this method. This lets
     * you scale, rotate, translate (move), and skew the context.
     *
     * @param a (`m11`) The cell in the first row and first column of the matrix.
     * @param b (`m12`) The cell in the second row and first column of the matrix.
     * @param c (`m21`) The cell in the first row and second column of the matrix.
     * @param d (`m22`) The cell in the second row and second column of the matrix.
     * @param e (`m41`) The cell in the first row and third column of the matrix.
     * @param f (`m42`) The cell in the second row and third column of the matrix.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform
     */
    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    /**
     * Resets (overrides) the current transformation to the identity matrix, and then
     * invokes a transformation described by the arguments of this method. This lets
     * you scale, rotate, translate (move), and skew the context.
     *
     * @param transform An object containing the `DOMMatrix` 2D transformation values.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform
     */
    setTransform(transform?: DOMMatrix2DInit): void;
    /**
     * Resets the current transform to the identity matrix.
     *
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform
     */
    resetTransform(): void;
    /**
     * Gets the current line dash pattern.
     *
     * @returns An `Array` of numbers that specify distances to alternately draw a line and a gap (in coordinate space units). If the number, when setting the elements, is odd, the elements of the array get copied and concatenated. For example, setting the line dash to `[5, 15, 25]` will result in getting back `[5, 15, 25, 5, 15, 25]`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash
     */
    getLineDash(): number[];
    /**
     * Sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.
     *
     * @note To return to using solid lines, set the line dash list to an empty array.
     * @param segments An `Array` of numbers that specify distances to alternately draw a line and a gap (in coordinate space units). If the number of elements in the array is odd, the elements of the array get copied and concatenated. For example, `[5, 15, 25]` will become `[5, 15, 25, 5, 15, 25]`. If the array is empty, the line dash list is cleared and line strokes return to being solid.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash
     */
    setLineDash(segments: number[]): void;
    /**
     * Erases the pixels in a rectangular area by setting them to transparent black.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect
     */
    clearRect(x: number, y: number, width: number, height: number): void;
    /**
     * Draws a rectangle that is filled according to the current
     * {@link OffscreenCanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * This method draws directly to the canvas without modifying the current path,
     * so any subsequent {@link OffscreenCanvasRenderingContext2D.fill | `fill()`} or
     * {@link OffscreenCanvasRenderingContext2D.stroke | `stroke()`} calls will have no effect on it.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect
     */
    fillRect(x: number, y: number, width: number, height: number): void;
    /**
     * Draws a rectangle that is stroked (outlined) according to the current
     * {@link OffscreenCanvasRenderingContext2D.strokeStyle | `strokeStyle`} and other context settings.
     *
     * This method draws directly to the canvas without modifying the current path,
     * so any subsequent {@link OffscreenCanvasRenderingContext2D.fill | `fill()`} or
     * {@link OffscreenCanvasRenderingContext2D.stroke | `stroke()`} calls will have no effect on it.
     *
     * @param x The x-axis coordinate of the rectangle's starting point.
     * @param y The y-axis coordinate of the rectangle's starting point.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect
     */
    strokeRect(x: number, y: number, width: number, height: number): void;
    createImageData(sw: number, sh: number, settings?: ImageDataSettings): ImageData;
    createImageData(imagedata: ImageData): ImageData;
    /**
     * Returns an {@link ImageData | `ImageData`} object representing the underlying pixel
     * data for a specified portion of the canvas.
     *
     * This method is not affected by the canvas's transformation matrix. If the specified
     * rectangle extends outside the bounds of the canvas, the pixels outside the canvas
     * are transparent black in the returned `ImageData` object.
     *
     * @param sx The x-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.
     * @param sy The y-axis coordinate of the top-left corner of the rectangle from which the ImageData will be extracted.
     * @param sw The width of the rectangle from which the ImageData will be extracted. Positive values are to the right, and negative to the left.
     * @param sh The height of the rectangle from which the ImageData will be extracted. Positive values are down, and negative are up.
     * @returns An `ImageData` object containing the image data for the rectangle of the canvas specified.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData
     */
    getImageData(sx: number, sy: number, sw: number, sh: number, settings?: ImageDataSettings | undefined): ImageData;
    putImageData(imageData: ImageData, dx: number, dy: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, dx: number, dy: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dWidth The width to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @param dHeight The height to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, dx: number, dy: number, dWidth: number, dHeight: number): void;
    /**
     * Draws an image onto the canvas.
     *
     * @param image The image to draw onto the canvas.
     * @param sx The x-axis coordinate of the top left corner of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sy The y-axis coordinate of the top left corner of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sWidth The width of the sub-rectangle of the source `image` to draw into the destination context.
     * @param sHeight The height of the sub-rectangle of the source `image` to draw into the destination context.
     * @param dx The x-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dy The y-axis coordinate in the destination canvas at which to place the top-left corner of the source `image`.
     * @param dWidth The width to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @param dHeight The height to draw the `image` in the destination canvas. This allows scaling of the drawn image.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage
     */
    drawImage(image: CanvasImageSource, sx: number, sy: number, sWidth: number, sHeight: number, dx: number, dy: number, dWidth: number, dHeight: number): void;
    lineTo(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    /**
     * Adds a rounded rectangle to the current path.
     *
     * @param x The x-axis coordinate of the rectangle's starting point, in pixels.
     * @param y The y-axis coordinate of the rectangle's starting point, in pixels.
     * @param width The rectangle's width. Positive values are to the right, and negative to the left.
     * @param height The rectangle's height. Positive values are down, and negative are up.
     * @param radii A number or list specifying the radii of the circular arc to be used for the corners of the rectangle.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect
     */
    roundRect(x: number, y: number, width: number, height: number, radii?: number | DOMPointInit | Iterable<number | DOMPointInit>): void;
    /**
     * Draws the outlines of the characters of the text string at the specified coordinates,
     * stroking the string's characters with the current {@link CanvasRenderingContext2D.strokeStyle | `strokeStyle`}.
     *
     * @param text A string specifying the text string to render into the context.
     * @param x The x-axis coordinate of the point at which to begin drawing the text, in pixels.
     * @param y The y-axis coordinate of the baseline on which to begin drawing the text, in pixels.
     * @param maxWidth The maximum number of pixels wide the text may be once rendered. If not specified, there is no limit to the width of the text.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText
     */
    strokeText(text: string, x: number, y: number, maxWidth?: number): void;
    createConicGradient(startAngle: number, x: number, y: number): CanvasGradient;
    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;
    createPattern(image: CanvasImageSource, repetition: string | null): CanvasPattern | null;
    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;
    /**
     * Draws a text string at the specified coordinates, filling the string's
     * characters with the current {@link CanvasRenderingContext2D.fillStyle | `fillStyle`}.
     *
     * @param text A string specifying the text string to render into the context.
     * @param x The x-axis coordinate of the point at which to begin drawing the text, in pixels.
     * @param y The y-axis coordinate of the baseline on which to begin drawing the text, in pixels.
     * @param maxWidth The maximum number of pixels wide the text may be once rendered. If not specified, there is no limit to the width of the text.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText
     */
    fillText(text: string, x: number, y: number, maxWidth?: number): void;
    /**
     * Returns a `TextMetrics` object that contains information about
     * the measured text (such as its width, for example).
     *
     * @param text The text string to measure.
     * @see https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText
     */
    measureText(text: string): TextMetrics;
}
/**
 * @see https://developer.mozilla.org/docs/Web/API/OffscreenCanvas
 */
declare class OffscreenCanvas extends EventTarget {
    /**
     * Specifies the width (in pixels) of the canvas.
     *
     * @see https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height
     */
    width: number;
    /**
     * Specifies the height (in pixels) of the canvas.
     *
     * @see https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height
     */
    height: number;
    /**
     * @param width The width of the offscreen canvas.
     * @param height The height of the offscreen canvas.
     */
    constructor(width: number, height: number);
    convertToBlob(options?: ImageEncodeOptions | undefined): Promise<Blob>;
    getContext(contextId: "2d", options?: any): OffscreenCanvasRenderingContext2D;
    transferToImageBitmap(): ImageBitmap;
    oncontextlost: null;
    oncontextrestored: null;
}
type DOMHighResTimeStamp = number;
interface ArrayBufferView {
    /**
     * The ArrayBuffer instance referenced by the array.
     */
    buffer: ArrayBuffer;
    /**
     * The length in bytes of the array.
     */
    byteLength: number;
    /**
     * The offset in bytes of the array.
     */
    byteOffset: number;
}
type BufferSource = ArrayBufferView | ArrayBuffer;
interface ImageEncodeOptions {
    quality?: number;
    type?: string;
}
type CanvasFillRule = "evenodd" | "nonzero";
type CanvasImageSource = Image | ImageBitmap | Screen | OffscreenCanvas;
type CanvasLineCap = "butt" | "round" | "square";
type CanvasLineJoin = "bevel" | "miter" | "round";
type CanvasTextAlign = "center" | "end" | "left" | "right" | "start";
type CanvasTextBaseline = "alphabetic" | "bottom" | "hanging" | "ideographic" | "middle" | "top";
type GlobalCompositeOperation = "color" | "color-burn" | "color-dodge" | "copy" | "darken" | "destination-atop" | "destination-in" | "destination-out" | "destination-over" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "lighter" | "luminosity" | "multiply" | "overlay" | "saturate" | "saturation" | "screen" | "soft-light" | "source-atop" | "source-in" | "source-out" | "source-over" | "xor";
type ImageSmoothingQuality = "high" | "low" | "medium";
interface TextMetrics {
    width: number;
    actualBoundingBoxLeft: number;
    actualBoundingBoxRight: number;
    fontBoundingBoxAscent: number;
    fontBoundingBoxDescent: number;
    actualBoundingBoxAscent: number;
    actualBoundingBoxDescent: number;
    emHeightAscent: number;
    emHeightDescent: number;
    hangingBaseline: number;
    alphabeticBaseline: number;
    ideographicBaseline: number;
}
type FontDisplay = "auto" | "block" | "fallback" | "optional" | "swap";
type FontFaceLoadStatus = "error" | "loaded" | "loading" | "unloaded";
type FontFaceSetLoadStatus = "loaded" | "loading";
interface FontFaceDescriptors {
    ascentOverride?: string;
    descentOverride?: string;
    display?: FontDisplay;
    featureSettings?: string;
    lineGapOverride?: string;
    stretch?: string;
    style?: string;
    unicodeRange?: string;
    weight?: string;
}
type ColorSpaceConversion = "default" | "none";
type ImageOrientation = "flipY" | "from-image" | "none";
type PremultiplyAlpha = "default" | "none" | "premultiply";
type ResizeQuality = "high" | "low" | "medium" | "pixelated";
type ImageBitmapSource = CanvasImageSource | Blob | ImageData;
type GamepadMappingType = "" | "standard" | "xr-standard";
type GamepadHapticActuatorType = "vibration";
interface GamepadEffectParameters {
    duration?: number;
    startDelay?: number;
    strongMagnitude?: number;
    weakMagnitude?: number;
}
type BlobPart = string | Blob | BufferSource;
interface BlobPropertyBag {
    endings?: "native" | "transparent";
    type?: string;
}
/**
 * A file-like object of immutable, raw data. Blobs represent data that isn't
 * necessarily in a JavaScript-native format.
 */
declare class Blob {
    /**
     * @param blobParts - An array of BlobPart values that will be concatenated into a single Blob.
     * @param options - An optional object that specifies the `Content-Type` and endings of the Blob.
     */
    constructor(blobParts?: BlobPart[], options?: BlobPropertyBag);
    /**
     * Returns the size of the Blob object, in bytes.
     */
    get size(): number;
    /**
     * Returns the MIME type of the Blob object.
     */
    get type(): string;
    /**
     * Returns a promise that resolves with a string representation of the Blob object.
     */
    text(): Promise<string>;
    /**
     * Returns a promise that resolves with an ArrayBuffer representing the Blob's data.
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * Returns a stream that can be used to read the contents of the Blob.
     */
    stream(): ReadableStream<Uint8Array>;
    /**
     * Returns a new Blob object containing the data in the specified range of bytes of the source Blob.
     *
     * @param start - The start byte index.
     * @param end - The end byte index.
     * @param type - The content type of the new Blob.
     */
    slice(start?: number, end?: number, type?: string): Blob;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams) */
declare class URLSearchParams {
    constructor(init?: string[][] | Record<string, string> | string | URLSearchParams);
    /**
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)
     */
    readonly size: number;
    /**
     * Appends a specified key/value pair as a new search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
     */
    append(name: string, value: string): void;
    /**
     * Deletes the given search parameter, and its associated value, from the list of all search parameters.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
     */
    delete(name: string, value?: string): void;
    /**
     * Returns the first value associated to the given search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
     */
    get(name: string): string | null;
    /**
     * Returns all the values association with a given search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
     */
    getAll(name: string): string[];
    /**
     * Returns a Boolean indicating if such a search parameter exists.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
     */
    has(name: string): boolean;
    /**
     * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
     *
     * @see https://developer.mozilla.org/docs/Web/API/URLSearchParams/set
     */
    set(name: string, value: string): void;
    /**
     * Sorts all key/value pairs contained in this object in place and returns
     * `undefined`. The sort order is according to unicode code points of the
     * keys. This method uses a stable sorting algorithm (i.e. the relative
     * order between key/value pairs with equal keys will be preserved).
     *
     * @see https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort
     */
    sort(): void;
    /**
     * Returns a string containing a query string suitable for use in a URL. Does not include the question mark.
     *
     * @example
     *
     * ```typescript
     * const params = new URLSearchParams({ foo: '1', bar: '2' });
     *
     * // Add a second foo parameter.
     * params.append("foo", 4);
     *
     * params.toString();
     * // Returns "foo=1&bar=2&foo=4"
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/URLSearchParams/toString
     */
    toString(): string;
    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;
    /** Returns a list of keys in the search params. */
    keys(): IterableIterator<string>;
    /** Returns a list of values in the search params. */
    values(): IterableIterator<string>;
    /** Returns an array of key, value pairs for every entry in the search params. */
    entries(): IterableIterator<[
        string,
        string
    ]>;
    [Symbol.iterator](): IterableIterator<[
        string,
        string
    ]>;
}
/**
 * The `URL` interface is used to parse, construct, normalize, and encode URLs.
 * It works by providing properties which allow you to easily read and modify
 * the components of a URL.
 *
 * You normally create a new `URL` object by specifying the URL as a string
 * when calling its constructor, or by providing a relative URL and a base
 * URL. You can then easily read the parsed components of the URL or make
 * changes to the URL.
 */
declare class URL {
    /**
     * Constructs a new URL object by parsing the specified URL.
     *
     * @param url The input URL to be parsed.
     * @param base The base URL to use in case the input URL is a relative URL.
     */
    constructor(url: string | URL, base?: string | URL);
    hash: string;
    host: string;
    hostname: string;
    href: string;
    password: string;
    pathname: string;
    port: string;
    protocol: string;
    search: string;
    username: string;
    readonly origin: string;
    get searchParams(): URLSearchParams;
    /**
     * Returns a string containing the full URL. It is a synonym for the {@link URL.href | `href`} property, though it can't be used to modify the value.
     */
    toString(): string;
    /**
     * Returns a string containing the full URL. It is a synonym for the {@link URL.href | `href`} property.
     */
    toJSON(): string;
    /**
     * Returns a string containing a URL which represents the provided {@link Blob | `Blob`} object.
     *
     * @param obj - The object for which an object URL is to be created.
     */
    static createObjectURL(obj: Blob): string;
    /**
     * Revokes an object URL previously created using URL.createObjectURL().
     *
     * @param url - A string representing a URL that was created by calling URL.createObjectURL().
     */
    static revokeObjectURL(url: string): void;
    /**
     * Returns a boolean indicating whether or not an absolute URL, or
     * a relative URL combined with a base URL, are parsable and valid.
     *
     * @param url The input URL to be parsed.
     * @param base The base URL to use in case the input URL is a relative URL.
     * @see https://developer.mozilla.org/docs/Web/API/URL/canParse_static
     */
    static canParse(url: string | URL, base?: string | URL): void;
}
interface FilePropertyBag extends BlobPropertyBag {
    lastModified?: number;
}
declare class File extends Blob {
    name: string;
    lastModified: number;
    webkitRelativePath: string;
    constructor(fileParts: BlobPart[], name: string, options?: FilePropertyBag);
}
interface TextDecodeOptions {
    stream?: boolean;
}
/**
 * The `TextDecoder` interface represents a decoder for a specific text encoding.
 * The implementation in nx.js only supports `"utf-8"` decoding.
 *
 * If you need to decode binary data of a different encoding, consider importing
 * a more full-featured polyfill, such as [`@kayahr/text-encoding`](https://www.npmjs.com/package/@kayahr/text-encoding).
 *
 * @copyright Apache License 2.0
 * @author Sam Thorogood
 * @see https://github.com/samthor/fast-text-encoding/blob/master/src/lowlevel.js
 */
declare class TextDecoder {
    encoding: string;
    fatal: boolean;
    ignoreBOM: boolean;
    constructor(encoding?: string);
    /**
     * Decodes a BufferSource into a string using the specified encoding.
     * If no input is provided, an empty string is returned.
     *
     * **Note:** Currently the `stream` option is not supported.
     *
     * @param input The BufferSource to decode.
     * @param options The options for decoding.
     * @returns The decoded string.
     */
    decode(input?: BufferSource, options?: TextDecodeOptions): string;
}
interface TextEncoderEncodeIntoResult {
    read: number;
    written: number;
}
/**
 * TextEncoder takes a UTF-8 encoded string of code points as input and return a stream of bytes.
 *
 * @link https://developer.mozilla.org/docs/Web/API/TextEncoder
 */
declare class TextEncoder {
    encoding: string;
    constructor();
    /**
     * Returns the result of running UTF-8's encoder.
     *
     * @link https://developer.mozilla.org/docs/Web/API/TextEncoder/encode
     */
    encode(input?: string): Uint8Array;
    /**
     * Runs the UTF-8 encoder on source, stores the result of that operation into destination, and returns the progress made as an object wherein read is the number of converted code units of source and written is the number of bytes modified in destination.
     *
     * **Note:** Not currently supported.
     *
     * @link https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto
     */
    encodeInto(input: string, destination: Uint8Array): TextEncoderEncodeIntoResult;
}
type ReadableStreamController<T> = ReadableStreamDefaultController<T> | ReadableByteStreamController;
type ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>;
type ReadableStreamReader<T> = ReadableStreamDefaultReader<T> | ReadableStreamBYOBReader;
interface ReadableStreamReadDoneResult<T> {
    done: true;
    value?: T;
}
interface ReadableStreamReadValueResult<T> {
    done: false;
    value: T;
}
interface UnderlyingByteSource {
    autoAllocateChunkSize?: number;
    cancel?: UnderlyingSourceCancelCallback;
    pull?: (controller: ReadableByteStreamController) => void | PromiseLike<void>;
    start?: (controller: ReadableByteStreamController) => any;
    type: "bytes";
}
interface UnderlyingDefaultSource<R = any> {
    cancel?: UnderlyingSourceCancelCallback;
    pull?: (controller: ReadableStreamDefaultController<R>) => void | PromiseLike<void>;
    start?: (controller: ReadableStreamDefaultController<R>) => any;
    type?: undefined;
}
interface TransformerFlushCallback<O> {
    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;
}
interface TransformerStartCallback<O> {
    (controller: TransformStreamDefaultController<O>): any;
}
interface TransformerTransformCallback<I, O> {
    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;
}
interface UnderlyingSinkAbortCallback {
    (reason?: any): void | PromiseLike<void>;
}
interface UnderlyingSinkCloseCallback {
    (): void | PromiseLike<void>;
}
interface UnderlyingSinkStartCallback {
    (controller: WritableStreamDefaultController): any;
}
interface UnderlyingSinkWriteCallback<W> {
    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;
}
interface UnderlyingSourceCancelCallback {
    (reason?: any): void | PromiseLike<void>;
}
interface UnderlyingSourcePullCallback<R> {
    (controller: ReadableStreamController<R>): void | PromiseLike<void>;
}
interface UnderlyingSourceStartCallback<R> {
    (controller: ReadableStreamController<R>): any;
}
interface UnderlyingSink<W = any> {
    abort?: UnderlyingSinkAbortCallback;
    close?: UnderlyingSinkCloseCallback;
    start?: UnderlyingSinkStartCallback;
    type?: undefined;
    write?: UnderlyingSinkWriteCallback<W>;
}
interface UnderlyingSource<R = any> {
    autoAllocateChunkSize?: number;
    cancel?: UnderlyingSourceCancelCallback;
    pull?: UnderlyingSourcePullCallback<R>;
    start?: UnderlyingSourceStartCallback<R>;
    type?: ReadableStreamType;
}
interface QueuingStrategySize<T = any> {
    (chunk: T): number;
}
interface QueuingStrategy<T = any> {
    highWaterMark?: number;
    size?: QueuingStrategySize<T>;
}
interface QueuingStrategyInit {
    /**
     * Creates a new ByteLengthQueuingStrategy with the provided high water mark.
     *
     * Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.
     */
    highWaterMark: number;
}
interface ReadableStreamGenericReader {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed) */
    readonly closed: Promise<undefined>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel) */
    cancel(reason?: any): Promise<void>;
}
interface ReadableStreamIteratorOptions {
    /**
     * Asynchronously iterates over the chunks in the stream's internal queue.
     *
     * Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader. The lock will be released if the async iterator's return() method is called, e.g. by breaking out of the loop.
     *
     * By default, calling the async iterator's return() method will also cancel the stream. To prevent this, use the stream's values() method, passing true for the preventCancel option.
     */
    preventCancel?: boolean;
}
interface Transformer<I = any, O = any> {
    flush?: TransformerFlushCallback<O>;
    readableType?: undefined;
    start?: TransformerStartCallback<O>;
    transform?: TransformerTransformCallback<I, O>;
    writableType?: undefined;
}
/**
 * This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
 */
declare class ByteLengthQueuingStrategy implements QueuingStrategy<ArrayBufferView> {
    constructor(init: QueuingStrategyInit);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark) */
    readonly highWaterMark: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size) */
    readonly size: QueuingStrategySize<ArrayBufferView>;
}
/**
 * This Streams API interface provides a built-in byte length queuing strategy that can be used when constructing streams.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
 */
declare class CountQueuingStrategy implements QueuingStrategy {
    constructor(init: QueuingStrategyInit);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark) */
    readonly highWaterMark: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size) */
    readonly size: QueuingStrategySize;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController) */
declare class ReadableByteStreamController {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest) */
    readonly byobRequest: ReadableStreamBYOBRequest | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize) */
    readonly desiredSize: number | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close) */
    close(): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue) */
    enqueue(chunk: ArrayBufferView): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error) */
    error(e?: any): void;
}
/**
 * This Streams API interface represents a readable stream of byte data.
 * The Fetch API offers a concrete instance of a ReadableStream through
 * the body property of a Response object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
 */
declare class ReadableStream<R = any> {
    constructor(underlyingSource: UnderlyingByteSource, strategy?: {
        highWaterMark?: number;
    });
    constructor(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>);
    constructor(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked) */
    readonly locked: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel) */
    cancel(reason?: any): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader) */
    getReader(options: {
        mode: "byob";
    }): ReadableStreamBYOBReader;
    getReader(): ReadableStreamDefaultReader<R>;
    getReader(options?: ReadableStreamGetReaderOptions): ReadableStreamReader<R>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough) */
    pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo) */
    pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee) */
    tee(): [
        ReadableStream<R>,
        ReadableStream<R>
    ];
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/values) */
    values(options?: ReadableStreamIteratorOptions): AsyncIterableIterator<any>;
    [Symbol.asyncIterator](options?: ReadableStreamIteratorOptions): AsyncIterableIterator<R>;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader) */
declare class ReadableStreamBYOBReader implements ReadableStreamGenericReader {
    constructor(stream: ReadableStream);
    closed: Promise<undefined>;
    cancel(reason?: any): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read) */
    read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock) */
    releaseLock(): void;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest) */
declare class ReadableStreamBYOBRequest {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view) */
    readonly view: ArrayBufferView | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond) */
    respond(bytesWritten: number): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView) */
    respondWithNewView(view: ArrayBufferView): void;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController) */
declare class ReadableStreamDefaultController<R = any> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize) */
    readonly desiredSize: number | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close) */
    close(): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue) */
    enqueue(chunk?: R): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error) */
    error(e?: any): void;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader) */
declare class ReadableStreamDefaultReader<R = any> implements ReadableStreamGenericReader {
    closed: Promise<undefined>;
    cancel(reason?: any): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read) */
    read(): Promise<ReadableStreamReadResult<R>>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock) */
    releaseLock(): void;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream) */
declare class TransformStream<I = any, O = any> {
    constructor(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable) */
    readonly readable: ReadableStream<O>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable) */
    readonly writable: WritableStream<I>;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController) */
declare class TransformStreamDefaultController<O = any> {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize) */
    readonly desiredSize: number | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue) */
    enqueue(chunk?: O): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error) */
    error(reason?: any): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate) */
    terminate(): void;
}
/**
 * This Streams API interface provides a standard abstraction for writing streaming data to a destination, known as a sink. This object comes with built-in backpressure and queuing.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
 */
declare class WritableStream<W = any> {
    constructor(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked) */
    readonly locked: boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/abort) */
    abort(reason?: any): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/close) */
    close(): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter) */
    getWriter(): WritableStreamDefaultWriter<W>;
}
/**
 * This Streams API interface represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
 */
declare class WritableStreamDefaultController {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal) */
    readonly signal: AbortSignal;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error) */
    error(e?: any): void;
}
/**
 * This Streams API interface is the object returned by WritableStream.getWriter() and once created locks the writer to the WritableStream ensuring that no other streams can write to the underlying sink.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
 */
declare class WritableStreamDefaultWriter<W = any> {
    constructor(stream: WritableStream<W>);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed) */
    readonly closed: Promise<undefined>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize) */
    readonly desiredSize: number | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready) */
    readonly ready: Promise<undefined>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort) */
    abort(reason?: any): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close) */
    close(): Promise<void>;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock) */
    releaseLock(): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write) */
    write(chunk?: W): Promise<void>;
}
type FormDataEntryValue = string | File;
declare class FormData {
    constructor();
    append(name: string, value: string | Blob): void;
    append(name: string, value: string): void;
    append(name: string, blobValue: Blob, filename?: string): void;
    delete(name: string): void;
    get(name: string): FormDataEntryValue | null;
    getAll(name: string): FormDataEntryValue[];
    has(name: string): boolean;
    set(name: string, value: string | Blob): void;
    set(name: string, value: string): void;
    set(name: string, blobValue: Blob, filename?: string): void;
    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;
    entries(): IterableIterator<[
        string,
        FormDataEntryValue
    ]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<FormDataEntryValue>;
    [Symbol.iterator](): IterableIterator<[
        string,
        FormDataEntryValue
    ]>;
}
type HeadersInit = [
    string,
    string
][] | Record<string, string> | Headers;
/**
 * This Fetch API interface allows you to perform various actions on HTTP request
 * and response headers. These actions include retrieving, setting, adding to,
 * and removing.
 *
 * A Headers object has an associated header list, which is initially
 * empty and consists of zero or more name and value pairs. You can add to this
 * using methods like {@link Headers.append | `append()`}. In all methods of this interface, header names
 * are matched by case-insensitive byte sequence.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
 */
declare class Headers {
    constructor(init?: HeadersInit);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/append) */
    append(name: string, value: string): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/delete) */
    delete(name: string): void;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/get) */
    get(name: string): string | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie) */
    getSetCookie(): string[];
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/has) */
    has(name: string): boolean;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/set) */
    set(name: string, value: string): void;
    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;
    /** Returns an iterator allowing to go through all key/value pairs contained in this object. */
    entries(): IterableIterator<[
        string,
        string
    ]>;
    /** Returns an iterator allowing to go through all keys of the key/value pairs contained in this object. */
    keys(): IterableIterator<string>;
    /** Returns an iterator allowing to go through all values of the key/value pairs contained in this object. */
    values(): IterableIterator<string>;
    /**
     * Same as {@link Headers.entries | `entries()`}.
     */
    [Symbol.iterator](): IterableIterator<[
        string,
        string
    ]>;
}
type BodyInit = ReadableStream<any> | Blob | BufferSource | FormData | URLSearchParams | string;
declare abstract class Body {
    body: ReadableStream<Uint8Array> | null;
    bodyUsed: boolean;
    headers: Headers;
    constructor(init?: Body | BodyInit | null, headers?: HeadersInit);
    /**
     * Returns a promise that resolves with an ArrayBuffer representation of the body.
     * If the body is null, it returns an empty ArrayBuffer.
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * Returns a promise that resolves with a {@link Blob} representation of the body.
     * The Blob's type will be the value of the 'content-type' header.
     */
    blob(): Promise<Blob>;
    /**
     * Returns a promise that resolves with a {@link FormData} representation of the body.
     * If the body cannot be decoded as form data, it throws a `TypeError`.
     */
    formData(): Promise<FormData>;
    /**
     * Returns a promise that resolves with a JSON representation of the body.
     * If the body cannot be parsed as JSON, it throws a `SyntaxError`.
     */
    json(): Promise<any>;
    /**
     * Returns a promise that resolves with a text representation of the body.
     */
    text(): Promise<string>;
}
type RequestCache = "default" | "force-cache" | "no-cache" | "no-store" | "only-if-cached" | "reload";
type RequestCredentials = "include" | "omit" | "same-origin";
type RequestDestination = "" | "audio" | "audioworklet" | "document" | "embed" | "font" | "frame" | "iframe" | "image" | "manifest" | "object" | "paintworklet" | "report" | "script" | "sharedworker" | "style" | "track" | "video" | "worker" | "xslt";
type RequestMode = "cors" | "navigate" | "no-cors" | "same-origin";
type RequestRedirect = "error" | "follow" | "manual";
interface RequestInit {
    /** A BodyInit object or null to set request's body. */
    body?: BodyInit | null;
    /** A string indicating how the request will interact with the local cache to set request's cache. */
    cache?: RequestCache;
    /** A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials. */
    credentials?: RequestCredentials;
    /** A Headers object, an object literal, or an array of two-item arrays to set request's headers. */
    headers?: HeadersInit;
    /** A cryptographic hash of the resource to be fetched by request. Sets request's integrity. */
    integrity?: string;
    /** A boolean to set request's keepalive. */
    keepalive?: boolean;
    /** A string to set request's method. */
    method?: string;
    /** A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode. */
    mode?: RequestMode;
    /** A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect. */
    redirect?: RequestRedirect;
    /** A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer. */
    referrer?: string;
    /** A referrer policy to set request's referrerPolicy. */
    referrerPolicy?: ReferrerPolicy;
    /** An AbortSignal to set request's signal. */
    signal?: AbortSignal | null;
    /** Can only be null. Used to disassociate request from any Window. */
    window?: null;
}
declare class Request extends Body {
    cache: RequestCache;
    credentials: RequestCredentials;
    destination: RequestDestination;
    integrity: string;
    keepalive: boolean;
    method: string;
    mode: RequestMode;
    redirect: RequestRedirect;
    referrer: string;
    referrerPolicy: ReferrerPolicy;
    signal: AbortSignal;
    url: string;
    constructor(input: string | URL | Request, init?: RequestInit);
    clone(): Request;
}
interface ResponseInit {
    /** Headers for the response. */
    headers?: HeadersInit;
    /** HTTP status code for the response. */
    status?: number;
    /** Status text for the response. */
    statusText?: string;
}
type ResponseType = "basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect";
/**
 * Class representing a HTTP response.
 */
declare class Response extends Body {
    /** Whether the response was redirected. */
    redirected: boolean;
    /** HTTP status code of the response. */
    status: number;
    /** Status text of the response. */
    statusText: string;
    /** Type of the response. */
    type: ResponseType;
    /** URL of the response. */
    url: string;
    /**
     * Create a new Response.
     * @param body - The body of the response.
     * @param init - Initialization options for the response.
     */
    constructor(body?: BodyInit | null, init?: ResponseInit);
    /**
     * Check if the response was successful.
     * @returns {boolean} - True if the status is between 200 and 299, inclusive.
     */
    get ok(): boolean;
    /**
     * Clone the response.
     * @throws {Error} - This method is not implemented.
     */
    clone(): Response;
    /**
     * Create a new error response.
     * @returns {Response} - The new error response.
     */
    static error(): Response;
    /**
     * Create a new redirect response.
     * @param {string | URL} url - The URL to redirect to.
     * @param {number} status - The status code for the redirect, defaults to 302.
     * @returns {Response} - The new redirect response.
     */
    static redirect(url: string | URL, status?: number): Response;
    /**
     * Create a new JSON response.
     * @param {any} data - The data to include in the response body.
     * @param {ResponseInit} init - Initialization options for the response.
     * @returns {Response} - The new JSON response.
     */
    static json(data: any, init?: ResponseInit): Response;
}
/**
 * The global `fetch()` method starts the process of fetching a resource from the network, returning a promise which is fulfilled once the response is available.
 *
 * ### Supported Protocols
 *
 * | Protocol | Description                                                                 |
 * |----------|-----------------------------------------------------------------------------|
 * | `http:`  | Fetch data from the network using the HTTP protocol                         |
 * | `https:` | Fetch data from the network using the HTTPS protocol                        |
 * | `blob:`  | Fetch data from a URL constructed by {@link URL.createObjectURL | `URL.createObjectURL()`}                |
 * | `data:`  | Fetch data from a [Data URI](https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/Data_URLs) (possibly base64-encoded)                        |
 * | `sdmc:`  | Fetch data from a local file on the SD card                                 |
 * | `romfs:` | Fetch data from the RomFS partition of the nx.js application                |
 * | `file:`  | Same as `sdmc:`                                                             |
 *
 * @example
 *
 * ```typescript
 * fetch('http://jsonip.com')
 *   .then(res => res.json())
 *   .then(data => {
 *     console.log(`Current IP address: ${data.ip}`);
 *   });
 * ```
 *
 * @see https://developer.mozilla.org/docs/Web/API/fetch
 */
declare function fetch(input: string | URL | Request, init?: RequestInit): Promise<Response>;
interface Algorithm {
    name: string;
}
type AlgorithmIdentifier = Algorithm | string;
/**
 * Basic cryptography features available in the current context.
 * It allows access to a cryptographically strong random number
 * generator and to cryptographic primitives.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Crypto
 */
declare class Crypto {
    /**
     * @ignore
     */
    constructor();
    /**
     * A {@link SubtleCrypto | `SubtleCrypto`} which can be
     * used to perform low-level cryptographic operations.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Crypto/subtle
     */
    get subtle(): SubtleCrypto;
    /**
     * Fills the provided `TypedArray` with cryptographically strong random values.
     *
     * @example
     *
     * ```typescript
     * const array = new Uint32Array(10);
     * crypto.getRandomValues(array);
     *
     * console.log("Your lucky numbers:");
     * for (const num of array) {
     *   console.log(num);
     * }
     * ```
     *
     * @param array The `TypedArray` to fill with random values.
     * @returns The same `TypedArray` filled with random values.
     * @see https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues
     */
    getRandomValues<T extends ArrayBufferView | null>(array: T): T;
    /**
     * Generates a cryptographically strong random unique identifier (UUID).
     *
     * @example
     *
     * ```typescript
     * const uuid = crypto.randomUUID();
     * console.log(uuid);
     * // "36b8f84d-df4e-4d49-b662-bcde71a8764f"
     * ```
     *
     * @returns A string representation of a UUID.
     * @see https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID
     */
    randomUUID(): `${string}-${string}-${string}-${string}-${string}`;
}
/**
 * The global `crypto` property returns the {@link Crypto} object associated to the global object.
 * This object allows your application to access to certain cryptographic related services.
 *
 * @see https://developer.mozilla.org/docs/Web/API/crypto_property
 */
declare var crypto: Crypto;
declare class SubtleCrypto {
    /**
     * @ignore
     */
    constructor();
    decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    deriveBits(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length: number): Promise<ArrayBuffer>;
    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | HkdfParams | Pbkdf2Params | AesDerivedKeyParams | HmacImportParams, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | HkdfParams | Pbkdf2Params | AesDerivedKeyParams | HmacImportParams, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;
    /**
     * Generates a digest of the given data. A digest is a short fixed-length value
     * derived from some variable-length input. Cryptographic digests should exhibit
     * collision-resistance, meaning that it's hard to come up with two different
     * inputs that have the same digest value.
     *
     * It takes as its arguments an identifier for the digest algorithm to use and
     * the data to digest. It returns a Promise which will be fulfilled with the digest.
     *
     * Note that this API does not support streaming input: you must read the entire
     * input into memory before passing it into the digest function.
     *
     * @param algorithm This may be a string or an object with a single property `name`
     * that is a string. The string names the hash function to use. Supported values are:
     *
     *  - `"SHA-1"` (but don't use this in cryptographic applications)
     *  - `"SHA-256"`
     *  - `"SHA-384"`
     *  - `"SHA-512"`
     * @param data An `ArrayBuffer`, a `TypedArray` or a `DataView` object containing the data to be digested
     * @see https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest
     */
    digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;
    encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    exportKey(format: "jwk", key: CryptoKey): Promise<JsonWebKey>;
    exportKey(format: "pkcs8" | "raw" | "spki", key: CryptoKey): Promise<ArrayBuffer>;
    exportKey(format: KeyFormat, key: CryptoKey): Promise<ArrayBuffer | JsonWebKey>;
    generateKey(algorithm: "Ed25519", extractable: boolean, keyUsages: readonly ("sign" | "verify")[]): Promise<CryptoKeyPair>;
    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKeyPair>;
    generateKey(algorithm: Pbkdf2Params | AesKeyGenParams | HmacKeyGenParams, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKey>;
    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey | CryptoKeyPair>;
    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKeyPair>;
    generateKey(algorithm: Pbkdf2Params | AesKeyGenParams | HmacKeyGenParams, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKey>;
    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey | CryptoKeyPair>;
    importKey(format: "jwk", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKey>;
    importKey(format: "pkcs8" | "raw" | "spki", keyData: BufferSource, algorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    importKey(format: "jwk", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: readonly KeyUsage[]): Promise<CryptoKey>;
    importKey(format: "pkcs8" | "raw" | "spki", keyData: BufferSource, algorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;
    sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | HmacImportParams | RsaHashedImportParams | EcKeyImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: Iterable<KeyUsage>): Promise<CryptoKey>;
    verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;
    wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;
}
interface ConsoleOptions {
    print(s: string): void;
    printErr(s: string): void;
}
declare class Console {
    constructor(opts?: Partial<ConsoleOptions>);
    /**
     * Prints string `s` to the console on the screen, without any formatting applied.
     * Newline is _not_ appending to the end of the string.
     *
     * @param s The text to print to the console.
     */
    print: (s: string) => void;
    /**
     * Prints string `s` to the debug log file, without any formatting applied.
     * Newline is _not_ appending to the end of the string.
     *
     * > TIP: This function **does not** invoke _text rendering mode_, so it can safely be used when rendering with the Canvas API.
     *
     * @param s The text to print to the log file.
     */
    printErr: (s: string) => void;
    /**
     * Logs the formatted `input` to the screen as white text.
     */
    log: (...input: unknown[]) => void;
    /**
     * Logs the formatted `input` to the screen as yellow text.
     */
    warn: (...input: unknown[]) => void;
    /**
     * Logs the formatted `input` to the screen as red text.
     */
    error: (...input: unknown[]) => void;
    /**
     * Writes the formatted `input` to the debug log file.
     *
     * > TIP: This function **does not** invoke _text rendering mode_, so it can safely be used when rendering with the Canvas API.
     */
    debug: (...input: unknown[]) => void;
    /**
     * Logs the formatted `input` to the screen as white text,
     * including a stack trace of where the function was invoked.
     */
    trace: (...input: unknown[]) => void;
}
/**
 * The global `console` object contains functions for printing text to the
 * screen, which can be useful for text-based applications, and is also
 * useful for debugging.
 *
 * Most methods use the {@link inspect | `Switch.inspect()`} method
 * for formatting, and the {@link console.print | `console.print()`} method
 * to output to the screen.
 *
 * > IMPORTANT: Unless otherwise stated, invoking any method on the `console`
 * > object switches the application to _text rendering mode_, clearing any
 * > pixels previously drawn on the screen using the Canvas API.
 *
 * @see https://developer.mozilla.org/docs/Web/API/console
 */
declare var console: Console;
/**
 * Provides information about the system's battery charge level.
 * The {@link Navigator.getBattery | `navigator.getBattery()`} method
 * returns a promise that resolves to a `BatteryManager` instance.
 *
 * @see https://developer.mozilla.org/docs/Web/API/BatteryManager
 */
declare class BatteryManager extends EventTarget {
    /**
     * @ignore
     */
    constructor();
    /**
     * A number representing the system's battery charge level scaled
     * to a value between 0.0 and 1.0.
     *
     * @see https://developer.mozilla.org/docs/Web/API/BatteryManager/level
     */
    readonly level: number;
    /**
     * A Boolean value indicating whether the battery is currently being charged.
     *
     * @see https://developer.mozilla.org/docs/Web/API/BatteryManager/charging
     */
    readonly charging: boolean;
    get chargingTime(): number;
    get dischargingTime(): number;
}
interface DOMRectInit {
    height?: number;
    width?: number;
    x?: number;
    y?: number;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly) */
declare class DOMRectReadOnly {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width) */
    readonly width: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height) */
    readonly height: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x) */
    readonly x: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y) */
    readonly y: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom) */
    get bottom(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left) */
    get left(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right) */
    get right(): number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top) */
    get top(): number;
    toJSON(): {
        x: number;
        y: number;
        width: number;
        height: number;
        top: number;
        right: number;
        bottom: number;
        left: number;
    };
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect_static) */
    static fromRect(o?: DOMRectInit): DOMRectReadOnly;
}
/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect) */
declare class DOMRect extends DOMRectReadOnly {
    width: number;
    height: number;
    x: number;
    y: number;
    constructor(x?: number, y?: number, width?: number, height?: number);
    static fromRect(o?: DOMRectInit): DOMRect;
}
/**
 * @see https://developer.mozilla.org/docs/Web/API/VirtualKeyboard
 */
declare class VirtualKeyboard extends EventTarget {
    /**
     * Indicates the position and size of the on-screen virtual keyboard that overlays the screen.
     *
     * @see https://developer.mozilla.org/docs/Web/API/VirtualKeyboard/boundingRect
     */
    readonly boundingRect: DOMRect;
    /**
     * Set the type of virtual keyboard.
     */
    type?: number;
    /**
     * Text to display for the "OK" button. Max of 8 characters.
     *
     * @example "Submit"
     */
    okButtonText?: string;
    /**
     * Single character to use for the left-side button.
     *
     * @example "-"
     * @note Only for "NumPad" keyboard type.
     */
    leftButtonText?: string;
    /**
     * Single character to use for the right-side button.
     *
     * @example "+"
     * @note Only for "NumPad" keyboard type.
     */
    rightButtonText?: string;
    /**
     * If set to `true`, then the dictionary will be enabled
     * for faster user input based on predictive text.
     */
    enableDictionary?: boolean;
    /**
     * If set to `true`, then the "Return" key will be enabled,
     * allowing for newlines to be included in the input.
     */
    enableReturn?: boolean;
    /**
     * Specifies the min string length. When the input
     * is too short, the "OK" button will be disabled.
     */
    minLength?: number;
    /**
     * Specifies the max string length. When the input
     * is too long, input will stop being accepted.
     */
    maxLength?: number;
    /**
     * @ignore
     */
    constructor();
    get overlaysContent(): boolean;
    get value(): string;
    get cursorIndex(): number;
    /**
     * Shows the on-screen virtual keyboard.
     *
     * @returns `undefined` and triggers a `"geometrychange"` event.
     * @see https://developer.mozilla.org/docs/Web/API/VirtualKeyboard/show
     */
    show(): void;
    /**
     * Hides the on-screen virtual keyboard.
     *
     * @returns `undefined` and triggers a `"geometrychange"` event.
     * @see https://developer.mozilla.org/docs/Web/API/VirtualKeyboard/hide
     */
    hide(): void;
}
/**
 * `Sensor` is the base class for all the other sensor interfaces.
 * This interface cannot be used directly. Instead it provides properties,
 * event handlers, and methods accessed by interfaces that inherit from it.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Sensor
 */
declare abstract class Sensor extends EventTarget {
    /**
     * @ignore
     */
    constructor();
    /**
     * A read-only boolean value indicating whether the sensor is active.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Sensor/activated
     */
    abstract get activated(): boolean;
    /**
     * A read-only boolean value indicating whether the sensor has a reading.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Sensor/hasReading
     */
    abstract get hasReading(): boolean;
    /**
     * A read-only number representing the timestamp of the latest sensor reading.
     * Value is `null` if there has not yet been a reading of the sensor.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Sensor/timestamp
     */
    abstract get timestamp(): number | null;
    /**
     * Activates the sensor.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Sensor/start
     */
    abstract start(): void;
    /**
     * Deactivates the sensor.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Sensor/stop
     */
    abstract stop(): void;
    addEventListener(type: "activate" | "error" | "reading", listener: (ev: Event) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
}
interface Vibration {
    duration: number;
    lowAmp: number;
    lowFreq: number;
    highAmp: number;
    highFreq: number;
}
/**
 * The `Navigator` interface represents the state and the identity of the user agent.
 * It allows scripts to query it and to register themselves to carry on some activities.
 *
 * A `Navigator` instance can be retrieved by accessing the global {@link navigator | `navigator`} property.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Navigator
 */
declare class Navigator {
    /**
     * @ignore
     */
    constructor();
    /**
     * Identifies the platform on which the application is running.
     *
     * @example "Horizon arm64"
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/platform
     */
    get platform(): string;
    /**
     * The value used for the `User-Agent` request header for
     * HTTP requests initiated with {@link fetch | `fetch()`}.
     *
     * @example "my-app/0.0.1 (Switch; en-us; rv:14.1.2|AMS 1.5.4|E) nx.js/0.0.18"
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/userAgent
     */
    get userAgent(): string;
    /**
     * Returns the maximum number of simultaneous touch contact points are
     * supported by the current device.
     *
     * @example 16
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints
     */
    get maxTouchPoints(): number;
    /**
     * Returns a promise which is resolved to a {@link BatteryManager} instance.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/getBattery
     */
    getBattery(): Promise<BatteryManager>;
    /**
     * Returns an array of {@link Gamepad} objects, one for each gamepad connected to the device.
     *
     * The indicies of the gamepads array map to the paired controller numbers assigned by the
     * system. Index 0 is the first controller, index 1 is the second controller, and so on.
     *
     * Index 0 is a special case, which represents input from both the first controller as well
     * as the handheld mode controller.
     *
     * The gamepads array contains 8 entries, so up to 8 controllers can be connected to the
     * device at a time. Disconnected controllers will have `null` values in the array.
     *
     * @example
     *
     * ```typescript
     * if (navigator.getGamepads()[0].buttons[0].pressed) {
     *   console.log('Button B is pressed on the first controller');
     * }
     * ```
     *
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads
     */
    getGamepads(): (Gamepad | null)[];
    /**
     * Vibrates the main gamepad for the specified number of milliseconds or pattern.
     *
     * If a vibration pattern is already in progress when this method is called,
     * the previous pattern is halted and the new one begins instead.
     *
     * @example
     *
     * ```typescript
     * // Vibrate for 200ms with the default amplitude/frequency values
     * navigator.vibrate(200);
     *
     * // Vibrate 'SOS' in Morse Code
     * navigator.vibrate([
     *   100, 30, 100, 30, 100, 30, 200, 30, 200, 30, 200, 30, 100, 30, 100, 30, 100,
     * ]);
     *
     * // Specify amplitude/frequency values for the vibration
     * navigator.vibrate({
     *   duration: 500,
     *   lowAmp: 0.2
     *   lowFreq: 160,
     *   highAmp: 0.6,
     *   highFreq: 500
     * });
     * ```
     *
     * @param pattern Provides a pattern of vibration and pause intervals. Each value indicates a number of milliseconds to vibrate or pause, in alternation. You may provide either a single value (to vibrate once for that many milliseconds) or an array of values to alternately vibrate, pause, then vibrate again.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/vibrate
     */
    vibrate(pattern: number | Vibration | (number | Vibration)[]): boolean;
    /**
     * A {@link VirtualKeyboard} instance to show or hide the virtual keyboard
     * programmatically, and get the current position and size of the virtual keyboard.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Navigator/virtualKeyboard
     */
    get virtualKeyboard(): VirtualKeyboard;
}
declare var navigator: Navigator;
/**
 * Defines the source of a font face, either a URL to an external resource or a
 * buffer, and font properties such as `style`, `weight`, and so on. For URL
 * font sources it allows authors to trigger when the remote font is fetched
 * and loaded, and to track loading status.
 *
 * @see https://developer.mozilla.org/docs/Web/API/FontFace
 */
declare class FontFace {
    ascentOverride: string;
    descentOverride: string;
    display: FontDisplay;
    family: string;
    featureSettings: string;
    lineGapOverride: string;
    readonly loaded: Promise<this>;
    readonly status: FontFaceLoadStatus;
    stretch: string;
    style: string;
    unicodeRange: string;
    weight: string;
    constructor(family: string, source: string | BufferSource, descriptors?: FontFaceDescriptors);
    load(): Promise<this>;
}
/**
 * Manages the loading of font-faces and querying of their download status.
 *
 * @see https://developer.mozilla.org/docs/Web/API/FontFaceSet
 */
declare class FontFaceSet extends EventTarget {
    /**
     * @ignore
     */
    constructor();
    onloading: ((this: FontFaceSet, ev: Event) => any) | null;
    onloadingdone: ((this: FontFaceSet, ev: Event) => any) | null;
    onloadingerror: ((this: FontFaceSet, ev: Event) => any) | null;
    ready: Promise<this>;
    status: FontFaceSetLoadStatus;
    check(font: string, text?: string | undefined): boolean;
    load(font: string, text?: string | undefined): Promise<FontFace[]>;
    get size(): number;
    add(font: FontFace): this;
    clear(): void;
    delete(font: FontFace): boolean;
    has(font: FontFace): boolean;
    keys(): IterableIterator<FontFace>;
    values(): IterableIterator<FontFace>;
    entries(): IterableIterator<[
        FontFace,
        FontFace
    ]>;
    forEach(callbackfn: (value: FontFace, key: FontFace, parent: FontFaceSet) => void, thisArg?: any): void;
    [Symbol.iterator](): IterableIterator<FontFace>;
}
/**
 * Contains the available fonts for use on the screen Canvas context.
 * By default, `"system-ui"` is the only font available, which is the system font provided by the Switch operating system.
 *
 * @demo See the `fonts` application for an example of using custom fonts.
 */
declare var fonts: FontFaceSet;
/**
 * Represents a handler for a timer. Can be a string or a function.
 */
type TimerHandler = string | Function;
/**
 * The global `setTimeout()` method sets a timer which executes a function or specified piece of code once the timer expires.
 *
 * @see https://developer.mozilla.org/docs/Web/API/setTimeout
 * @param handler - The function or string to be executed after the timer expires.
 * @param timeout - The time, in milliseconds, the timer should wait before the specified function or code is executed. If this parameter is omitted, a value of 0 is used.
 * @param args - Additional arguments to be passed to the function specified by the handler parameter.
 * @returns The numeric ID of the timer, which can be used later with the {@link clearTimeout | `clearTimeout()`} method to cancel the timer.
 */
declare function setTimeout(handler: TimerHandler, timeout?: number, ...args: any[]): number;
/**
 * The global `setInterval()` method repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.
 *
 * @see https://developer.mozilla.org/docs/Web/API/setInterval
 * @param handler - The function or string to be executed every time the interval elapses.
 * @param timeout - The time, in milliseconds, the timer should delay in between executions of the specified function or code. If this parameter is omitted, a value of 0 is used.
 * @param args - Additional arguments to be passed to the function specified by the handler parameter.
 * @returns The numeric ID of the timer, which can be used later with the {@link clearInterval | `clearInterval()`} method to cancel the timer.
 */
declare function setInterval(handler: TimerHandler, timeout?: number, ...args: any[]): number;
/**
 * The global `clearTimeout()` method clears a timer set with the {@link setTimeout | `setTimeout()`} method.
 *
 * @see https://developer.mozilla.org/docs/Web/API/clearTimeout
 * @param id - The ID of the timer you want to clear, as returned by {@link setTimeout | `setTimeout()`}.
 */
declare function clearTimeout(id?: number): void;
/**
 * The global `clearInterval()` method clears a timer set with the {@link setInterval | `setInterval()`} method.
 *
 * @see https://developer.mozilla.org/docs/Web/API/clearInterval
 * @param id - The ID of the timer you want to clear, as returned by {@link setInterval | `setInterval()`}.
 */
declare function clearInterval(id?: number): void;
interface FrameRequestCallback {
    (time: DOMHighResTimeStamp): void;
}
/**
 * Cancels an animation frame request previously scheduled through
 * a call to {@link requestAnimationFrame | `requestAnimationFrame()`}.
 *
 * @param id The ID value returned by the call to {@link requestAnimationFrame | `requestAnimationFrame()`} that requested the callback.
 * @see https://developer.mozilla.org/docs/Web/API/window/cancelAnimationFrame
 */
declare function cancelAnimationFrame(id: number): void;
/**
 * Tells the application that you wish to perform an animation. The application
 * will call the supplied callback function prior to the next repaint.
 *
 * @param callback The function to call when it's time to update your animation for the next repaint.
 * @returns The request ID, that uniquely identifies the entry in the callback list. You can pass this value to {@link cancelAnimationFrame | `cancelAnimationFrame()`} to cancel the refresh callback request.
 * @see https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame
 */
declare function requestAnimationFrame(callback: FrameRequestCallback): number;
/**
 * @see https://developer.mozilla.org/docs/Web/API/Storage
 */
declare class Storage {
    /**
     * @ignore
     */
    constructor();
    [name: string]: any;
    /**
     * The number of data items stored in the data store.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Storage/length
     */
    get length(): number;
    /**
     * Clears all keys stored in a data store.
     *
     * @see https://developer.mozilla.org/docs/Web/API/Storage/clear
     */
    clear(): void;
    /**
     * Get an item from the provided key from the data store.
     *
     * @param key The name of the key you want to retrieve the value of.
     * @returns A string containing the value of the key. If the key does not exist, `null` is returned.
     * @see https://developer.mozilla.org/docs/Web/API/Storage/getItem
     */
    getItem(key: string): string | null;
    /**
     * Retrieves the name of the nth key in the data store. The order
     * of keys is user-agent defined, so you should not rely on it.
     *
     * @param index The number of the key you want to get the name of. This is a zero-based index.
     * @returns  A string containing the name of the key. If the index does not exist, `null` is returned.
     * @see https://developer.mozilla.org/docs/Web/API/Storage/key
     */
    key(index: number): string | null;
    /**
     * Removes the provided key from the data store, if it exists.
     *
     * If there is no item associated with the given key, this method will do nothing.
     *
     * @param key The name of the key you want to remove.
     * @see https://developer.mozilla.org/docs/Web/API/Storage/removeItem
     */
    removeItem(key: string): void;
    /**
     * Adds or updates the key to the data store with the provided value.
     *
     * @param key The name of the key you want to create / update.
     * @param value The value you want to give the key you are creating / updating.
     * @see https://developer.mozilla.org/docs/Web/API/Storage/setItem
     */
    setItem(key: string, value: string): void;
}
/**
 * `localStorage` is a {@link Storage} instance which persists to the system's Save Data filesystem.
 *
 * When `localStorage` is accessed for the first time, the currently selected user profile is checked
 * to determine the profile which the data will be stored for. If no user profile is currently selected,
 * then the profile selection interface is shown.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window/localStorage
 */
declare var localStorage: Storage;
/**
 * The `Window` class represents the global scope within the application.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window
 */
declare class Window extends EventTarget {
    /**
     * @ignore
     */
    constructor();
}
declare var window: Window & typeof globalThis;
/**
 * @see https://developer.mozilla.org/docs/Web/API/Element/keydown_event
 */
declare function addEventListener(type: "keydown", callback: EventListenerOrEventListenerObject<KeyboardEvent>, options?: AddEventListenerOptions | boolean): void;
/**
 * @see https://developer.mozilla.org/docs/Web/API/Element/keyup_event
 */
declare function addEventListener(type: "keyup", callback: EventListenerOrEventListenerObject<KeyboardEvent>, options?: AddEventListenerOptions | boolean): void;
/**
 * The `error` event is sent to the global scope when an unhandled error is thrown.
 *
 * The default behavior when this event occurs is to print the error to the screen
 * using {@link console.error | `console.error()`}, and no further application code
 * is executed. The user must then press the `+` button to exit the application.
 * Call `event.preventDefault()` to supress this default behavior.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window/error_event
 */
declare function addEventListener(type: "error", callback: EventListenerOrEventListenerObject<ErrorEvent>, options?: AddEventListenerOptions | boolean): void;
/**
 * The `unhandledrejection` event is sent to the global scope when a JavaScript
 * Promise that has no rejection handler is rejected.
 *
 * The default behavior when this event occurs is to print the error to the screen
 * using {@link console.error | `console.error()`}, and no further application code
 * is executed. The user must then press the `+` button to exit the application.
 * Call `event.preventDefault()` to supress this default behavior.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event
 */
declare function addEventListener(type: "unhandledrejection", callback: EventListenerOrEventListenerObject<PromiseRejectionEvent>, options?: AddEventListenerOptions | boolean): void;
/**
 * The `beforeunload` event is fired when the `+` button is pressed on the first controller.
 *
 * This event gives the application a chance to prevent the default behavior of the
 * application exiting. If the event is canceled, the application **will not exit**.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event
 */
declare function addEventListener(type: "beforeunload", callback: (event: Event) => any, options?: AddEventListenerOptions | boolean): void;
/**
 * The `unload` event is fired when the application is exiting.
 *
 * By the time this event occurs, the event loop has already been stopped,
 * so no async operations may be scheduled in the event handler.
 *
 * @see https://developer.mozilla.org/docs/Web/API/Window/unload_event
 */
declare function addEventListener(type: "unload", callback: (event: Event) => any, options?: AddEventListenerOptions | boolean): void;
declare function addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;
/**
 * Removes the event listener in target's event listener list with the same type, callback, and options.
 *
 * @see {@link https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener | MDN Reference}
 */
declare function removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
/**
 * Dispatches a synthetic event event to target and returns true if either event's cancelable attribute value is false or its `preventDefault()` method was not invoked, and false otherwise.
 *
 * @see {@link https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent | MDN Reference}
 */
declare function dispatchEvent(event: Event): boolean;
/**
 * @see https://developer.mozilla.org/docs/Web/API/Performance_API
 */
declare class Performance {
    /**
     * @see https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin
     */
    readonly timeOrigin: DOMHighResTimeStamp;
    /**
     * @ignore
     */
    constructor();
    /**
     * @see https://developer.mozilla.org/docs/Web/API/Performance/now
     */
    now(): DOMHighResTimeStamp;
}
declare var performance: Performance;
interface AmbientLightSensorOptions {
    /**
     * The desired number of times per second a sample should be taken,
     * meaning the number of times per second that the `reading` event
     * will be called. A whole number or decimal may be used, the latter
     * for frequencies less than a second.
     */
    frequency?: number;
}
/**
 * `Sensor` implementation which returns the current light level or
 * illuminance of the ambient light around the hosting device.
 *
 * @see https://developer.mozilla.org/docs/Web/API/AmbientLightSensor
 */
declare class AmbientLightSensor extends Sensor {
    /**
     * @see https://developer.mozilla.org/docs/Web/API/AmbientLightSensor/AmbientLightSensor
     */
    constructor(opts?: AmbientLightSensorOptions);
    /**
     * The current light level (in {@link https://wikipedia.org/wiki/Lux | lux}) of the ambient light level around the hosting device.
     *
     * @see https://developer.mozilla.org/docs/Web/API/AmbientLightSensor/illuminance
     */
    get illuminance(): number | null;
    get activated(): boolean;
    get hasReading(): boolean;
    get timestamp(): number | null;
    start(): void;
    stop(): void;
}
/**
 * The `import.meta` meta-property exposes context-specific metadata to a JavaScript module.
 * It contains information about the module, such as the module's URL.
 *
 * @see https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/import.meta
 */
interface ImportMeta {
    /**
     * Contains the absolute URL of the JavaScript module that is being executed.
     *
     * @example "romfs:/main.js"
     */
    url: string;
    /**
     * Set to `true` when the JavaScript module that is being executed is the
     * entrypoint file of the application.
     */
    main: boolean;
}
/**
 * Queues a microtask to be executed at a safe time prior
 * to control returning to the runtime's event loop.
 *
 * @param callback A function to be executed when the runtime determines it is safe to invoke.
 * @see https://developer.mozilla.org/docs/Web/API/queueMicrotask
 */
declare function queueMicrotask(callback: () => void): void;

/**
 * The `Switch` global object contains native interfaces to interact with the Switch hardware.
 */
declare namespace Switch {
	/**
	 * A Map-like object providing methods to interact with the environment variables of the process.
	 *
	 * Use {@link env | `Switch.env`} to access the singleton instance of this class.
	 */
	declare class Env {
	    /**
	     * @private
	     */
	    constructor();
	    get(name: string): string | undefined;
	    set(name: string, value: string): void;
	    delete(name: string): void;
	    toObject(): Record<string, string>;
	}
	/**
	 * The `Socket` class represents a TCP connection, from which you can
	 * read and write data. A socket begins in a _connected_ state (if the
	 * socket fails to connect, an error is thrown). While in a _connected_
	 * state, the socket’s `ReadableStream` and `WritableStream` can be
	 * read from and written to respectively.
	 */
	declare class Socket {
	    readonly readable: ReadableStream<Uint8Array>;
	    readonly writable: WritableStream<Uint8Array>;
	    readonly opened: Promise<SocketInfo>;
	    readonly closed: Promise<void>;
	    /**
	     * @ignore
	     */
	    constructor();
	    /**
	     * Closes the socket and its underlying connection.
	     */
	    close(reason?: any): Promise<void>;
	    /**
	     * Enables opportunistic TLS (otherwise known as
	     * {@link https://en.wikipedia.org/wiki/Opportunistic_TLS | StartTLS})
	     * which is a requirement for some protocols
	     * (primarily postgres/mysql and other DB protocols).
	     */
	    startTls(): Socket;
	}
	declare class Server extends EventTarget {
	    /**
	     * @ignore
	     */
	    constructor();
	    /**
	     * The "accept" event is fired when a new TCP client connection
	     * has been established. Use the `fd` property to determine
	     * which file descriptor to read / write to interact with this
	     * socket.
	     */
	    addEventListener(type: "accept", listener: (ev: SocketEvent) => any, options?: boolean | AddEventListenerOptions): void;
	    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
	    /**
	     * Shuts down the server and closes any existing client connections.
	     */
	    close(): void;
	}
	/**
	 * Performs a DNS lookup to resolve a hostname to an array of IP addresses.
	 *
	 * @example
	 *
	 * ```typescript
	 * const ipAddresses = await Switch.resolveDns('example.com');
	 * ```
	 */
	declare function resolveDns(hostname: string): Promise<string[]>;
	/**
	 * Creates the directory at the provided `path`, as well as any necessary parent directories.
	 *
	 * @example
	 *
	 * ```typescript
	 * const count = Switch.mkdirSync('sdmc:/foo/bar/baz');
	 * console.log(`Created ${count} directories`);
	 * // Created 3 directories
	 * ```
	 *
	 * @param path Path of the directory to create.
	 * @param mode The file mode to set for the directories. Default: `0o777`.
	 * @returns The number of directories created. If the directory already exists, returns `0`.
	 */
	declare function mkdirSync(path: PathLike, mode?: number): number;
	/**
	 * Returns a Promise which resolves to an `ArrayBuffer` containing
	 * the contents of the file at `path`.
	 *
	 * @example
	 *
	 * ```typescript
	 * const buffer = await Switch.readFile('sdmc:/switch/awesome-app/state.json');
	 * const gameState = JSON.parse(new TextDecoder().decode(buffer));
	 * ```
	 */
	declare function readFile(path: PathLike): Promise<ArrayBuffer | null>;
	/**
	 * Synchronously returns an array of the file names within `path`.
	 *
	 * @example
	 *
	 * ```typescript
	 * for (const file of Switch.readDirSync('sdmc:/')) {
	 *   // … do something with `file` …
	 * }
	 * ```
	 */
	declare function readDirSync(path: PathLike): string[] | null;
	/**
	 * Synchronously returns an `ArrayBuffer` containing the contents
	 * of the file at `path`.
	 *
	 * @example
	 *
	 * ```typescript
	 * const buffer = Switch.readFileSync('sdmc:/switch/awesome-app/state.json');
	 * const appState = JSON.parse(new TextDecoder().decode(buffer));
	 * ```
	 */
	declare function readFileSync(path: PathLike): ArrayBuffer | null;
	/**
	 * Synchronously writes the contents of `data` to the file at `path`.
	 *
	 * @example
	 *
	 * ```typescript
	 * const appStateJson = JSON.stringify(appState);
	 * Switch.writeFileSync('sdmc:/switch/awesome-app/state.json', appStateJson);
	 * ```
	 */
	declare function writeFileSync(path: PathLike, data: string | BufferSource): void;
	/**
	 * Synchronously removes the file or directory recursively specified by `path`.
	 *
	 * @param path File path to remove.
	 */
	declare function removeSync(path: PathLike): void;
	/**
	 * Removes the file or directory recursively specified by `path`.
	 *
	 * @param path File path to remove.
	 */
	declare function remove(path: PathLike): Promise<void>;
	/**
	 *
	 * @param path File path to retrieve file stats for.
	 * @returns Object containing the file stat information of `path`, or `null` if the file does not exist.
	 */
	declare function statSync(path: PathLike): Stats | null;
	/**
	 * Returns a Promise which resolves to an object containing
	 * information about the file pointed to by `path`.
	 *
	 * @param path File path to retrieve file stats for.
	 */
	declare function stat(path: PathLike): Promise<Stats | null>;
	/**
	 * Options object for the {@link file | `Switch.file()`} function.
	 */
	interface FsFileOptions {
	    type?: string;
	    /**
	     * Create a "big file", which is a directory with the "archive" bit set.
	     * This will cause HOS to treat the directory as if it were a file
	     * containing the directory's concatenated contents, allowing you to
	     * write file contents larger than 4GB.
	     */
	    bigFile?: boolean;
	}
	/**
	 * Returns an {@link FsFile} instance for the given `path`.
	 *
	 * @param path
	 */
	declare function file(path: PathLike, opts?: FsFileOptions): FsFile;
	declare class FsFile extends File {
	    constructor(path: PathLike, opts?: FsFileOptions);
	    get size(): number;
	    stat(): Promise<Stats | null>;
	    arrayBuffer(): Promise<ArrayBuffer>;
	    text(): Promise<string>;
	    json(): Promise<any>;
	    stream(opts?: {
	        chunkSize: number;
	    }): ReadableStream<Uint8Array>;
	    get writable(): WritableStream<string | BufferSource>;
	}
	interface InspectOptions {
	    depth?: number;
	    refs?: Map<{}, number>;
	}
	/**
	 * Inspects a given value and returns a string representation of it.
	 * The function uses ANSI color codes to highlight different parts of the output.
	 * It can handle and correctly output different types of values including primitives, functions, arrays, and objects.
	 *
	 * @param v - The value to inspect.
	 * @param opts - Options which may modify the generated string representation of the value.
	 * @returns A string representation of `v` with ANSI color codes.
	 */
	declare const inspect: {
	    (v: unknown, opts?: InspectOptions): string;
	    custom: symbol;
	    keys: symbol;
	    values: symbol;
	    entries: symbol;
	};
	type ProfileUid = [
	    bigint,
	    bigint
	];
	/**
	 * Represents a user profile that exists on the system.
	 */
	declare class Profile {
	    /**
	     * The unique ID of the profile, represented as an array of two `bigint` values.
	     */
	    readonly uid: ProfileUid;
	    /**
	     * The human readable nickname of the profile.
	     */
	    readonly nickname: string;
	    /**
	     * The raw JPEG data for the profile image. Can be decoded with the `Image` class.
	     */
	    readonly image: ArrayBuffer;
	    /**
	     * Creates a new `Profile` instance from the given profile UID.
	     *
	     * @example
	     *
	     * ```typescript
	     * const profile = new Switch.Profile([
	     *   0x10005d4864d166b7n,
	     *   0x965b8cb028cd8a81n,
	     * ]);
	     * console.log(profile.nickname);
	     * ```
	     */
	    constructor(uid: ProfileUid);
	    static get current(): Profile | null;
	    static set current(v: Profile | null);
	    /**
	     * Shows the user selection interface and returns a {@link Profile}
	     * instance representing the user that was selected.
	     *
	     * @note This function blocks the event loop until the user has made their selection.
	     */
	    static select(): Profile | null;
	    /**
	     * Can be used as an iterator to retrieve the list of user profiles.
	     *
	     * @example
	     *
	     * ```typescript
	     * for (const profile of Switch.Profile) {
	     *   console.log(profile.nickname);
	     * }
	     * ```
	     */
	    static [Symbol.iterator](): Generator<Profile, void, unknown>;
	}
	interface SaveDataFilter {
	    spaceId?: number;
	    type?: number;
	    uid?: ProfileUid;
	    systemId?: bigint;
	    applicationId?: bigint;
	    index?: number;
	    rank?: number;
	}
	interface SaveDataCreationInfoBase {
	    spaceId: number;
	    type: number;
	    size: bigint;
	    journalSize: bigint;
	    uid?: ProfileUid;
	    systemId?: bigint;
	    applicationId?: bigint;
	    index?: number;
	    rank?: number;
	}
	interface SaveDataCreationInfoWithNacp {
	    spaceId: number;
	    type: number;
	    size?: bigint;
	    journalSize?: bigint;
	    uid?: ProfileUid;
	    index?: number;
	    rank?: number;
	}
	type SaveDataCreationInfo = SaveDataCreationInfoBase | SaveDataCreationInfoWithNacp;
	/**
	 * Represents a "save data store".
	 */
	declare class SaveData {
	    /**
	     * A `URL` instance that points to the root of the filesystem mount.
	     * You should use this to create file path references within
	     * the filesystem mount.
	     *
	     * @example
	     *
	     * ```typescript
	     * const dataUrl = new URL('data.json', saveData.url);
	     * ```
	     */
	    url: URL | null;
	    readonly id: bigint;
	    readonly spaceId: number;
	    readonly type: number;
	    readonly uid: ProfileUid;
	    readonly systemId: bigint;
	    readonly applicationId: bigint;
	    readonly size: bigint;
	    readonly index: number;
	    readonly rank: number;
	    /**
	     * @private
	     */
	    constructor();
	    /**
	     * Commits to the disk any write operations that have occurred on this filesystem mount since the previous commit.
	     *
	     * Failure to call this function after writes will cause the data to be lost after the application exits.
	     *
	     * @example
	     *
	     * ```typescript
	     * const saveStateUrl = new URL('state', saveData.url);
	     * Switch.writeFileSync(saveStateUrl, 'my application state...');
	     *
	     * saveData.commit(); // Write operation is persisted to the disk
	     * ```
	     */
	    commit(): void;
	    /**
	     * Deletes the save data store.
	     *
	     * > CAUTION: This is a destructive operation! Use caution when using
	     * > this function to avoid accidental data loss, such as prompting the
	     * > user to confirm the deletion.
	     */
	    delete(): void;
	    /**
	     * Grows a save data store to the requested `dataSize` and `journalSize`.
	     *
	     * @param dataSize
	     * @param journalSize
	     */
	    extend(dataSize: bigint, journalSize: bigint): void;
	    /**
	     * Mounts the save data such that filesystem operations may be used.
	     *
	     * @param name The name of the mount for filesystem paths. By default, a random name is generated. Shouldn't exceed 31 characters, and shouldn't have a trailing colon.
	     */
	    mount(name?: string): URL;
	    /**
	     * Unmounts the filesystem mount. Any filesytem operations attempting to use the mount path in the future will throw an error.
	     *
	     * @example
	     *
	     * ```typescript
	     * Switch.readDirSync(saveData.url); // OK
	     *
	     * saveData.unmount();
	     *
	     * Switch.readDirSync(saveData.url); // ERROR THROWN!
	     * ```
	     */
	    unmount(): void;
	    freeSpace(): bigint;
	    totalSpace(): bigint;
	    static createSync(init: SaveDataCreationInfoBase): SaveData;
	    static createSync(init: SaveDataCreationInfoWithNacp, nacp: ArrayBuffer): SaveData;
	    static filter(filter: SaveDataFilter): Generator<SaveData, void, unknown>;
	    static find(filter: SaveDataFilter): SaveData | undefined;
	    static [Symbol.iterator](): Generator<SaveData, void, unknown>;
	}
	declare function networkInfo(): NetworkInfo;
	/**
	 * Represents an installed application (game) on the console,
	 * or a homebrew application (`.nro` file).
	 *
	 * Can be used as an iterator to retrieve the list of installed applications.
	 *
	 * @example
	 *
	 * ```typescript
	 * for (const app of Switch.Application) {
	 *   console.log(app.name);
	 * }
	 * ```
	 */
	declare class Application {
	    /**
	     * The 64-bit unique identifier of the application (`PresenceGroupId`).
	     */
	    readonly id: bigint;
	    /**
	     * The raw NACP data of the application. Use the `@tootallnate/nacp` module to parse this data.
	     */
	    readonly nacp: ArrayBuffer;
	    /**
	     * The raw JPEG data for the cover art of the application. Can be decoded with the `Image` class.
	     */
	    readonly icon?: ArrayBuffer;
	    /**
	     * The name of the application.
	     */
	    readonly name: string;
	    /**
	     * The version of the application.
	     */
	    readonly version: string;
	    /**
	     * The author or publisher of the application.
	     */
	    readonly author: string;
	    /**
	     * Creates an `Application` instance from the ID of an
	     * installed application.
	     *
	     * @example
	     *
	     * ```typescript
	     * const app = new Switch.Application(0x100bc0018138000n);
	     * console.log(app.name);
	     * ```
	     *
	     * @param id The ID of the installed application.
	     */
	    constructor(id: bigint);
	    /**
	     * Creates an `Application` instance from an `ArrayBuffer`
	     * containing the contents of a `.nro` homebrew application.
	     *
	     * @example
	     *
	     * ```typescript
	     * const nro = await Switch.readFile('sdmc:/hbmenu.nro');
	     * const app = new Switch.Application(nro);
	     * console.log(app.name);
	     * ```
	     *
	     * @param nro The contents of the `.nro` file.
	     */
	    constructor(nro: ArrayBuffer);
	    /**
	     * Launches the application.
	     *
	     * @note This only works for installed applications (__not__ homebrew apps).
	     */
	    launch(): never;
	    createSaveDataSync(info: SaveDataCreationInfoWithNacp): SaveData;
	    /**
	     * Creates the Save Data for this {@link Application} for the provided user profile.
	     *
	     * @example
	     *
	     * ```typescript
	     * const profile = Switch.currentProfile({ required: true });
	     * app.createSaveData(profile);
	     * ```
	     *
	     * @param profile The {@link Profile} to create the save data for.
	     */
	    createProfileSaveDataSync(profile: Profile, info?: Partial<SaveDataCreationInfoWithNacp>): SaveData;
	    /**
	     * Creates the Cache storage for this {@link Application} for the specified save index ID.
	     *
	     * @param index The save index ID. Defaults to `0`.
	     */
	    createCacheSaveDataSync(index?: number, info?: Partial<SaveDataCreationInfoWithNacp>): SaveData;
	    filterSaveData(filter?: Omit<SaveDataFilter, "applicationId">): Generator<SaveData, void, unknown>;
	    findSaveData(filter: Omit<SaveDataFilter, "applicationId">): SaveData | undefined;
	    /**
	     * An {@link Application} instance representing the currently running application.
	     */
	    static get self(): Application;
	    static [Symbol.iterator](): Generator<Application, void, unknown>;
	}
	interface IRSensorInit {
	    /**
	     * The desired number of times per second a sample should be taken,
	     * meaning the number of times per second that the `reading` event
	     * will be called. A whole number or decimal may be used, the latter
	     * for frequencies less than a second.
	     *
	     * @default 2
	     */
	    frequency?: number;
	    /**
	     * CSS color that will be used when rendering the image produced by
	     * the IR sensor.
	     *
	     * @default "green"
	     */
	    color?: string;
	}
	/**
	 * The `IRSensor` class is a `Sensor` subclass. When the sensor is
	 * activated, the controller's IR (infrared) camera is enabled,
	 * allowing the application to get the image data for each frame of
	 * the camera.
	 *
	 * @example
	 *
	 * ```typescript
	 * const ctx = screen.getContext('2d');
	 *
	 * const sensor = new Switch.IRSensor();
	 * sensor.addEventListener('reading', () => {
	 * 	ctx.drawImage(sensor.image, 0, 0);
	 * });
	 * sensor.start();
	 * ```
	 */
	declare class IRSensor extends Sensor {
	    /**
	     * @ignore
	     */
	    constructor(opts?: IRSensorInit);
	    /**
	     * The underlying `ImageBitmap` instance containing the contents
	     * of the IR sensor. Can be used with `ctx.drawImage()` or any
	     * other functions that work with `ImageBitmap` instances.
	     */
	    get image(): ImageBitmap;
	    get activated(): boolean;
	    get hasReading(): boolean;
	    get timestamp(): number | null;
	    start(): void;
	    stop(): void;
	}
	/**
	 * The `Switch.Album` class allows for interacting with the Switch's photo gallery,
	 * providing access to the screenshots / video recordings that the user has saved.
	 *
	 * It is a `Set` subclass, which contains entries of
	 * {@link AlbumFile | `Switch.AlbumFile`} instances.
	 *
	 * @example
	 *
	 * ```typescript
	 * import { CapsAlbumStorage } from '@nx.js/constants';
	 *
	 * const album = new Switch.Album(CapsAlbumStorage.Sd);
	 * for (const file of album) {
	 *   console.log(file);
	 * }
	 * ```
	 */
	declare class Album extends Set<AlbumFile> {
	    readonly storage: number;
	    constructor(storage: number);
	    values(): IterableIterator<AlbumFile>;
	    keys(): IterableIterator<AlbumFile>;
	    entries(): IterableIterator<[
	        AlbumFile,
	        AlbumFile
	    ]>;
	    [Symbol.iterator](): IterableIterator<AlbumFile>;
	}
	/**
	 * Represents a file within a {@link Album | `Switch.Album`} content store,
	 * which is either a screenshot (JPEG image) or a screen recording (MP4 movie).
	 *
	 * It is a subclass of `File`, so you can use familiar features like `name`,
	 * `lastModified` and `arrayBuffer()`. It also has additional metadata like
	 * `applicationId` to determine which application generated the contents.
	 *
	 * @example
	 *
	 * ```typescript
	 * const ctx = screen.getContext('2d');
	 * const buf = await file.arrayBuffer();
	 * const img = await createImageBitmap(new Blob([buf]));
	 * ctx.drawImage(img, 0, 0);
	 * ```
	 */
	declare class AlbumFile extends File {
	    /**
	     * The ID of the application which generated the album file.
	     */
	    applicationId: bigint;
	    /**
	     * The type of content which the album file contains. The value
	     * corresponds with the `CapsAlbumFileContents` enum from `@nx.js/constants`.
	     */
	    content: number;
	    /**
	     * The storage device which contains the album file. The value
	     * corresponds with the `CapsAlbumStorage` enum from `@nx.js/constants`.
	     */
	    storage: number;
	    /**
	     * Unique ID for when there's multiple album files with the same timestamp.
	     *
	     * @note The value is usually `0`.
	     */
	    id: number;
	    constructor(storage: number, id: string);
	    text(): Promise<string>;
	    slice(start?: number, end?: number, type?: string): Blob;
	    stream(): ReadableStream<Uint8Array>;
	    /**
	     * Loads the thumbnail JPEG image for the album file.
	     *
	     * @example
	     *
	     * ```typescript
	     * const ctx = screen.getContext('2d');
	     * const buf = await file.thumbnail();
	     * const img = await createImageBitmap(new Blob([buf]));
	     * ctx.drawImage(img, 0, 0);
	     * ```
	     */
	    thumbnail(): Promise<ArrayBuffer>;
	}
	declare class FileSystem {
	    /**
	     * A `URL` instance that points to the root of the filesystem mount.
	     * You should use this to create file path references within
	     * the filesystem mount.
	     *
	     * @example
	     *
	     * ```typescript
	     * const dataUrl = new URL('data.json', fileSystem.url);
	     * ```
	     */
	    url: URL | null;
	    /**
	     * @private
	     */
	    constructor();
	    /**
	     * Mounts the `FileSystem` such that filesystem operations may be used.
	     *
	     * @param name The name of the mount for filesystem paths. By default, a random name is generated. Shouldn't exceed 31 characters, and shouldn't have a trailing colon.
	     */
	    mount(name?: string): URL;
	    /**
	     * Opens a file system partition specified by its `BisPartitionId`.
	     *
	     * @example
	     *
	     * ```typescript
	     * import { BisPartitionId } from '@nx.js/constants';
	     *
	     * // Open and mount the "User" partition
	     * const fs = Switch.FileSystem.openBis(BisPartitionId.User);
	     * const url = fs.mount();
	     *
	     * // Read the file entries at the root of the partition
	     * console.log(Switch.readDirSync(url));
	     * ```
	     *
	     * @param id The `BisPartitionId` of the partition to open.
	     */
	    static openBis(id: number): FileSystem;
	}
	type PathLike = string | URL;
	interface Versions {
	    /**
	     * The version of the Atmosphère custom firmware running on the Switch, or `undefined` if not running Atmosphère.
	     */
	    readonly ams: string | undefined;
	    readonly cairo: string;
	    /**
	     * `true` if the Switch is running Atmosphère from emuMMC, `false` if running sysMMC, or `undefined` if not running Atmosphère.
	     */
	    readonly emummc: boolean | undefined;
	    readonly freetype2: string;
	    readonly harfbuzz: string;
	    readonly hos: string;
	    readonly nxjs: string;
	    readonly png: string;
	    readonly quickjs: string;
	    readonly turbojpeg: string;
	    readonly wasm3: string;
	    readonly webp: string;
	}
	interface Stats {
	    size: number;
	    mtime: number;
	    atime: number;
	    ctime: number;
	    mode: number;
	    uid: number;
	    gid: number;
	}
	/**
	 * Specifies the port number and optional IP address
	 * for creating a TCP server.
	 *
	 * @see {@link listen | `Switch.listen()`}
	 */
	interface ListenOptions {
	    /**
	     * The IP address of the network interface to bind to.
	     *
	     * If not defined, defaults to `0.0.0.0` to allow
	     * connections on any network device.
	     *
	     * @example "127.0.0.1"
	     */
	    ip?: string;
	    /**
	     * The port number to accept TCP connection from.
	     *
	     * @example 80
	     */
	    port: number;
	    /**
	     * Function to invoke when a new TCP socket has connected.
	     *
	     * This is a shorthand for:
	     *
	     * ```js
	     * server.addEventListener('accept', fn);
	     * ```
	     */
	    accept?: (e: SocketEvent) => void;
	}
	interface NetworkInfo {
	    ip: string;
	    subnetMask: string;
	    gateway: string;
	}
	/**
	 * Specifies the port number and optional hostname for connecting
	 * to a remove server over the network.
	 *
	 * @see {@link connect | `Switch.connect()`}
	 */
	interface SocketAddress {
	    /**
	     * The hostname of the destination server to connect to.
	     *
	     * If not defined, then `hostname` defaults to `127.0.0.1`.
	     *
	     * @example "example.com"
	     */
	    hostname: string;
	    /**
	     * The port number to connect to.
	     *
	     * @example 80
	     */
	    port: number;
	}
	type SecureTransportKind = "off" | "on" | "starttls";
	interface SocketEventInit extends EventInit {
	    socket: Socket;
	}
	declare class SocketEvent extends Event {
	    socket: Socket;
	    constructor(type: string, init: SocketEventInit);
	}
	interface SocketOptions {
	    /**
	     * Specifies whether or not to use TLS when creating the TCP socket.
	     *  - `off` — Do not use TLS.
	     *  - `on` — Use TLS.
	     *  - `starttls` — Do not use TLS initially, but allow the socket to be upgraded to use TLS by calling {@link Socket.startTls | `startTls()`}.
	     */
	    secureTransport?: SecureTransportKind;
	    /**
	     * Defines whether the writable side of the TCP socket will automatically close on end-of-file (EOF).
	     * When set to false, the writable side of the TCP socket will automatically close on EOF.
	     * When set to true, the writable side of the TCP socket will remain open on EOF.
	     * This option is similar to that offered by the Node.js net module and allows interoperability with code which utilizes it.
	     */
	    allowHalfOpen?: boolean;
	}
	interface SocketInfo {
	    remoteAddress: string;
	    localAddress: string;
	}
	/**
	 * A Map-like object providing methods to interact with the environment variables of the process.
	 *
	 * See {@link Env | `Switch.Env`} for more information.
	 */
	declare const env: Env;
	/**
	 * Array of the arguments passed to the process. Under normal circumstances, this array contains a single entry with the absolute path to the `.nro` file.
	 * @example [ "sdmc:/switch/nxjs.nro" ]
	 */
	declare const argv: string[];
	/**
	 * String value of the entrypoint JavaScript file that was evaluated. If a `main.js` file is present on the application's RomFS, then that will be executed first, in which case the value will be `romfs:/main.js`. Otherwise, the value will be the path of the `.nro` file on the SD card, with the `.nro` extension replaced with `.js`.
	 * @example "romfs:/main.js"
	 * @example "sdmc:/switch/nxjs.js"
	 */
	declare const entrypoint: string;
	/**
	 * An Object containing the versions numbers of nx.js and all supporting C libraries.
	 */
	declare const version: Versions;
	/**
	 * Signals for the nx.js application to exit. The global "unload"
	 * event will be invoked after the event loop has stopped.
	 */
	declare function exit(): never;
	/**
	 * Returns the current working directory as a URL string with a trailing slash.
	 *
	 * @example "sdmc:/switch/"
	 */
	declare function cwd(): string;
	/**
	 * Changes the current working directory to the specified path.
	 *
	 * @example
	 *
	 * ```typescript
	 * Switch.chdir('sdmc:/switch/awesome-app/images');
	 * ```
	 */
	declare function chdir(dir: PathLike): void;
	/**
	 * Creates a TCP connection to the specified `address`.
	 *
	 * @param address Hostname and port number of the destination TCP server to connect to.
	 * @param opts Socket options, for example to create a secure TLS connection.
	 * @see https://sockets-api.proposal.wintercg.org
	 */
	declare function connect<Host extends string, Port extends string>(address: `${Host}:${Port}` | SocketAddress, opts?: SocketOptions): Socket;
	/**
	 * Creates a TCP server bound to the specified `port` number.
	 *
	 * @param opts Object containing the port number and other configuration properties.
	 */
	declare function listen(opts: ListenOptions): Server;
	/**
	 * Returns the "applet type" of the running application.
	 *
	 * This can be used to differentiate between "applet mode" vs. "full-memory mode".
	 *
	 * @example
	 *
	 * ```typescript
	 * import { AppletType } from '@nx.js/constants';
	 *
	 * if (Switch.appletType() === AppletType.Application) {
	 *   console.log('Running in "full-memory mode"');
	 * } else {
	 *   console.log('Running in "applet mode"');
	 * }
	 * ```
	 */
	declare function appletType(): number;
	/**
	 * Returns the current "operation mode" of the device.
	 *
	 * This can be used to identify if the device is handheld or docked.
	 *
	 * @example
	 *
	 * ```typescript
	 * import { OperationMode } from '@nx.js/constants';
	 *
	 * if (Switch.operationMode() === OperationMode.Handheld) {
	 *   console.log('Device is currently handheld');
	 * } else {
	 *   console.log('Device is currently docked');
	 * }
	 * ```
	 */
	declare function operationMode(): number;
	/**
	 * Set media playback state.
	 *
	 * @param state If `true`, screen dimming and auto sleep is disabled.
	 */
	declare function setMediaPlaybackState(state: boolean): void;
}

/**
 * The `WebAssembly` JavaScript object acts as the namespace for all
 * {@link https://developer.mozilla.org/docs/WebAssembly | WebAssembly}-related functionality.
 *
 * Unlike most other global objects, `WebAssembly` is not a constructor (it is not a function object).
 *
 * @see https://developer.mozilla.org/docs/WebAssembly
 */
declare namespace WebAssembly {
	interface GlobalDescriptor<T extends ValueType = ValueType> {
	    mutable?: boolean;
	    value: T;
	}
	interface MemoryDescriptor {
	    initial: number;
	    maximum?: number;
	    shared?: boolean;
	}
	interface ModuleExportDescriptor {
	    kind: ImportExportKind;
	    name: string;
	}
	interface ModuleImportDescriptor {
	    kind: ImportExportKind;
	    module: string;
	    name: string;
	}
	interface TableDescriptor {
	    element: TableKind;
	    initial: number;
	    maximum?: number;
	}
	interface ValueTypeMap {
	    anyfunc: Function;
	    externref: any;
	    f32: number;
	    f64: number;
	    i32: number;
	    i64: bigint;
	    v128: never;
	}
	interface WebAssemblyInstantiatedSource {
	    instance: Instance;
	    module: Module;
	}
	type ImportExportKind = "function" | "global" | "memory" | "table";
	type TableKind = "anyfunc" | "externref";
	type ExportValue = Function | Global | Memory | Table;
	type Exports = Record<string, ExportValue>;
	type ImportValue = ExportValue | number;
	type Imports = Record<string, ModuleImports>;
	type ModuleImports = Record<string, ImportValue>;
	type ValueType = keyof ValueTypeMap;
	declare class CompileError extends Error {
	    name: string;
	}
	declare class RuntimeError extends Error {
	    name: string;
	}
	declare class LinkError extends Error {
	    name: string;
	}
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Global) */
	declare class Global<T extends ValueType = ValueType> {
	    constructor(descriptor: GlobalDescriptor<T>, value?: ValueTypeMap[T]);
	    /**
	     * The value contained inside the global variable — this can be used to directly set and get the global's value.
	     */
	    get value(): ValueTypeMap[T];
	    set value(v: ValueTypeMap[T]);
	    /**
	     * Old-style method that returns the value contained inside the global variable.
	     */
	    valueOf(): ValueTypeMap[T];
	}
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance) */
	declare class Instance {
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance/exports) */
	    readonly exports: Exports;
	    constructor(moduleObject: Module, importObject?: Imports);
	}
	/**
	 * [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory)
	 */
	declare class Memory {
	    constructor(descriptor: MemoryDescriptor);
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer) */
	    readonly buffer: ArrayBuffer;
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/grow) */
	    grow(delta: number): number;
	}
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) */
	declare class Module {
	    constructor(bytes: BufferSource);
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/customSections) */
	    static customSections(moduleObject: Module, sectionName: string): ArrayBuffer[];
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/exports) */
	    static exports(moduleObject: Module): ModuleExportDescriptor[];
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module/imports) */
	    static imports(moduleObject: Module): ModuleImportDescriptor[];
	}
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table) */
	declare class Table {
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/length) */
	    readonly length: number;
	    constructor(descriptor: TableDescriptor, value?: any);
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/get) */
	    get(index: number): any;
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/grow) */
	    grow(delta: number, value?: any): number;
	    /** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/set) */
	    set(index: number, value?: any): void;
	}
	/**
	 * [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile)
	 */
	declare function compile(bytes: BufferSource): Promise<Module>;
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/compileStreaming) */
	declare function compileStreaming(source: Response | PromiseLike<Response>): Promise<Module>;
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate) */
	declare function instantiate(bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;
	declare function instantiate(moduleObject: Module, importObject?: Imports): Promise<Instance>;
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming) */
	declare function instantiateStreaming(source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;
	/** [MDN Reference](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/validate) */
	declare function validate(bytes: BufferSource): boolean;
}
